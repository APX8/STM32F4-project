
stm32f4proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb8  08008eb8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ec0  08008ec0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000084c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008dc  200008dc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001964b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be2  00000000  00000000  0003970b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025228  00000000  00000000  0003f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a86b  00000000  00000000  00064b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec43  00000000  00000000  0007f3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e016  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059b0  00000000  00000000  0014e068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e10 	.word	0x08008e10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008e10 	.word	0x08008e10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <_write+0x28>)
 80004e4:	f004 f904 	bl	80046f0 <HAL_UART_Transmit>
	return len;
 80004e8:	687b      	ldr	r3, [r7, #4]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200001a0 	.word	0x200001a0

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fcfe 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f818 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f93e 	bl	8000784 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f87e 	bl	8000608 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050c:	f000 f8aa 	bl	8000664 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000510:	f000 f8d8 	bl	80006c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000514:	f007 fc34 	bl	8007d80 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f90a 	bl	8000730 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World\r\n");
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x38>)
 800051e:	f008 f8c7 	bl	80086b0 <puts>
	  HAL_Delay(500);
 8000522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000526:	f000 fd5b 	bl	8000fe0 <HAL_Delay>
    MX_USB_HOST_Process();
 800052a:	f007 fc4f 	bl	8007dcc <MX_USB_HOST_Process>
	  printf("Hello World\r\n");
 800052e:	e7f5      	b.n	800051c <main+0x24>
 8000530:	08008e28 	.word	0x08008e28

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 ff5e 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f9ea 	bl	8003994 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c6:	f000 fa1b 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 fc4b 	bl	8003e84 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f4:	f000 fa04 	bl	8000a00 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f002 fbc1 	bl	8002dcc <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f9d6 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000ac 	.word	0x200000ac
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2S3_Init+0x54>)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <MX_I2S3_Init+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_I2S3_Init+0x54>)
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <MX_I2S3_Init+0x5c>)
 800068e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_I2S3_Init+0x54>)
 80006a4:	f002 fcd6 	bl	8003054 <HAL_I2S_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ae:	f000 f9a7 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000100 	.word	0x20000100
 80006bc:	40003c00 	.word	0x40003c00
 80006c0:	00017700 	.word	0x00017700

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_SPI1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI1_Init+0x64>)
 8000710:	220a      	movs	r2, #10
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_SPI1_Init+0x64>)
 8000716:	f003 ff15 	bl	8004544 <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f96e 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000148 	.word	0x20000148
 800072c:	40013000 	.word	0x40013000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f003 ff75 	bl	8004656 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f945 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001a0 	.word	0x200001a0
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b92      	ldr	r3, [pc, #584]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a91      	ldr	r2, [pc, #580]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b8f      	ldr	r3, [pc, #572]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b8b      	ldr	r3, [pc, #556]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a8a      	ldr	r2, [pc, #552]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b88      	ldr	r3, [pc, #544]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b84      	ldr	r3, [pc, #528]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a83      	ldr	r2, [pc, #524]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b81      	ldr	r3, [pc, #516]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b7d      	ldr	r3, [pc, #500]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a7c      	ldr	r2, [pc, #496]	; (80009e8 <MX_GPIO_Init+0x264>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b7a      	ldr	r3, [pc, #488]	; (80009e8 <MX_GPIO_Init+0x264>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b76      	ldr	r3, [pc, #472]	; (80009e8 <MX_GPIO_Init+0x264>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a75      	ldr	r2, [pc, #468]	; (80009e8 <MX_GPIO_Init+0x264>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b73      	ldr	r3, [pc, #460]	; (80009e8 <MX_GPIO_Init+0x264>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b6f      	ldr	r3, [pc, #444]	; (80009e8 <MX_GPIO_Init+0x264>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a6e      	ldr	r2, [pc, #440]	; (80009e8 <MX_GPIO_Init+0x264>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b6c      	ldr	r3, [pc, #432]	; (80009e8 <MX_GPIO_Init+0x264>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	4869      	ldr	r0, [pc, #420]	; (80009ec <MX_GPIO_Init+0x268>)
 8000848:	f000 fe9c 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	4867      	ldr	r0, [pc, #412]	; (80009f0 <MX_GPIO_Init+0x26c>)
 8000852:	f000 fe97 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000856:	2200      	movs	r2, #0
 8000858:	f24f 0110 	movw	r1, #61456	; 0xf010
 800085c:	4865      	ldr	r0, [pc, #404]	; (80009f4 <MX_GPIO_Init+0x270>)
 800085e:	f000 fe91 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000862:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8000866:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000868:	2303      	movs	r3, #3
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	485d      	ldr	r0, [pc, #372]	; (80009ec <MX_GPIO_Init+0x268>)
 8000878:	f000 fce8 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087c:	2308      	movs	r3, #8
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4856      	ldr	r0, [pc, #344]	; (80009ec <MX_GPIO_Init+0x268>)
 8000894:	f000 fcda 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC2 PC4
                           PC5 PC6 PC8 PC9
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000898:	f642 3376 	movw	r3, #11126	; 0x2b76
 800089c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4850      	ldr	r0, [pc, #320]	; (80009f0 <MX_GPIO_Init+0x26c>)
 80008ae:	f000 fccd 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4849      	ldr	r0, [pc, #292]	; (80009f0 <MX_GPIO_Init+0x26c>)
 80008ca:	f000 fcbf 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4841      	ldr	r0, [pc, #260]	; (80009f0 <MX_GPIO_Init+0x26c>)
 80008ea:	f000 fcaf 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	483d      	ldr	r0, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x274>)
 8000904:	f000 fca2 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15;
 8000908:	f248 1302 	movw	r3, #33026	; 0x8102
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4836      	ldr	r0, [pc, #216]	; (80009f8 <MX_GPIO_Init+0x274>)
 800091e:	f000 fc95 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8000922:	f64f 13b3 	movw	r3, #63923	; 0xf9b3
 8000926:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4831      	ldr	r0, [pc, #196]	; (80009fc <MX_GPIO_Init+0x278>)
 8000938:	f000 fc88 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800093c:	2304      	movs	r3, #4
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	482b      	ldr	r0, [pc, #172]	; (80009fc <MX_GPIO_Init+0x278>)
 8000950:	f000 fc7c 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000966:	2305      	movs	r3, #5
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4822      	ldr	r0, [pc, #136]	; (80009fc <MX_GPIO_Init+0x278>)
 8000972:	f000 fc6b 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD0 PD1 PD2 PD3
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000976:	f640 73cf 	movw	r3, #4047	; 0xfcf
 800097a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x270>)
 800098c:	f000 fc5e 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000990:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000994:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_GPIO_Init+0x270>)
 80009aa:	f000 fc4f 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_GPIO_Init+0x270>)
 80009c2:	f000 fc43 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x268>)
 80009dc:	f000 fc36 	bl	800124c <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fbbc 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa0:	2312      	movs	r3, #18
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <HAL_I2C_MspInit+0x8c>)
 8000ab8:	f000 fbc8 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <HAL_I2S_MspInit+0xf0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d15a      	bne.n	8000bd2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b20:	23c0      	movs	r3, #192	; 0xc0
 8000b22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 fbc9 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b38:	f7ff ff62 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a26      	ldr	r2, [pc, #152]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b90:	2310      	movs	r3, #16
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480e      	ldr	r0, [pc, #56]	; (8000be4 <HAL_I2S_MspInit+0xf8>)
 8000bac:	f000 fb4e 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <HAL_I2S_MspInit+0xfc>)
 8000bce:	f000 fb3d 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	; 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40003c00 	.word	0x40003c00
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020800 	.word	0x40020800

08000bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <HAL_SPI_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12b      	bne.n	8000c66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c46:	23e0      	movs	r3, #224	; 0xe0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_SPI_MspInit+0x8c>)
 8000c62:	f000 faf3 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x84>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12b      	bne.n	8000cf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0x8c>)
 8000cf2:	f000 faab 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f922 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <OTG_FS_IRQHandler+0x10>)
 8000d66:	f000 fe91 	bl	8001a8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200005c8 	.word	0x200005c8

08000d74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
	}

return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f007 faa2 	bl	8008390 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200001e4 	.word	0x200001e4
 8000e80:	200008e0 	.word	0x200008e0

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd7 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f007 fa61 	bl	800839c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fb0d 	bl	80004f8 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000eec:	08008ec8 	.word	0x08008ec8
  ldr r2, =_sbss
 8000ef0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ef4:	200008dc 	.word	0x200008dc

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f94f 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fd6c 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f967 	bl	8001232 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f92f 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	200001e8 	.word	0x200001e8

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001e8 	.word	0x200001e8

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff3e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e16b      	b.n	8001540 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 815a 	bne.w	800153a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80b4 	beq.w	800153a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <HAL_GPIO_Init+0x30c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a5f      	ldr	r2, [pc, #380]	; (8001558 <HAL_GPIO_Init+0x30c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <HAL_GPIO_Init+0x30c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a5b      	ldr	r2, [pc, #364]	; (800155c <HAL_GPIO_Init+0x310>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_GPIO_Init+0x314>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d02b      	beq.n	8001472 <HAL_GPIO_Init+0x226>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a51      	ldr	r2, [pc, #324]	; (8001564 <HAL_GPIO_Init+0x318>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d025      	beq.n	800146e <HAL_GPIO_Init+0x222>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a50      	ldr	r2, [pc, #320]	; (8001568 <HAL_GPIO_Init+0x31c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01f      	beq.n	800146a <HAL_GPIO_Init+0x21e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4f      	ldr	r2, [pc, #316]	; (800156c <HAL_GPIO_Init+0x320>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x21a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HAL_GPIO_Init+0x324>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x216>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <HAL_GPIO_Init+0x328>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x212>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x32c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x330>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x20a>
 8001452:	2307      	movs	r3, #7
 8001454:	e00e      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001456:	2308      	movs	r3, #8
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800145a:	2306      	movs	r3, #6
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	; (800155c <HAL_GPIO_Init+0x310>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_GPIO_Init+0x334>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a32      	ldr	r2, [pc, #200]	; (8001580 <HAL_GPIO_Init+0x334>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_GPIO_Init+0x334>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_GPIO_Init+0x334>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_GPIO_Init+0x334>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_GPIO_Init+0x334>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_GPIO_Init+0x334>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <HAL_GPIO_Init+0x334>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae90 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40021c00 	.word	0x40021c00
 8001580:	40013c00 	.word	0x40013c00

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b8:	b08f      	sub	sp, #60	; 0x3c
 80015ba:	af0a      	add	r7, sp, #40	; 0x28
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e054      	b.n	8001672 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f006 fc2a 	bl	8007e3c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fc58 	bl	8004ebc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	687e      	ldr	r6, [r7, #4]
 8001614:	466d      	mov	r5, sp
 8001616:	f106 0410 	add.w	r4, r6, #16
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001626:	e885 0003 	stmia.w	r5, {r0, r1}
 800162a:	1d33      	adds	r3, r6, #4
 800162c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f003 fbd2 	bl	8004dd8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f003 fc4f 	bl	8004ede <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	687e      	ldr	r6, [r7, #4]
 8001648:	466d      	mov	r5, sp
 800164a:	f106 0410 	add.w	r4, r6, #16
 800164e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165a:	e885 0003 	stmia.w	r5, {r0, r1}
 800165e:	1d33      	adds	r3, r6, #4
 8001660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f003 fdd8 	bl	8005218 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800167a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800167a:	b590      	push	{r4, r7, lr}
 800167c:	b089      	sub	sp, #36	; 0x24
 800167e:	af04      	add	r7, sp, #16
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	461a      	mov	r2, r3
 8001688:	4603      	mov	r3, r0
 800168a:	70fb      	strb	r3, [r7, #3]
 800168c:	460b      	mov	r3, r1
 800168e:	70bb      	strb	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_HCD_HC_Init+0x28>
 800169e:	2302      	movs	r3, #2
 80016a0:	e076      	b.n	8001790 <HAL_HCD_HC_Init+0x116>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	333d      	adds	r3, #61	; 0x3d
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	3338      	adds	r3, #56	; 0x38
 80016ca:	787a      	ldrb	r2, [r7, #1]
 80016cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	3340      	adds	r3, #64	; 0x40
 80016dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3339      	adds	r3, #57	; 0x39
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	333f      	adds	r3, #63	; 0x3f
 8001700:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001704:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	78ba      	ldrb	r2, [r7, #2]
 800170a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800170e:	b2d0      	uxtb	r0, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	333a      	adds	r3, #58	; 0x3a
 800171c:	4602      	mov	r2, r0
 800171e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da09      	bge.n	800173c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	333b      	adds	r3, #59	; 0x3b
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e008      	b.n	800174e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	212c      	movs	r1, #44	; 0x2c
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	4413      	add	r3, r2
 8001748:	333b      	adds	r3, #59	; 0x3b
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	333c      	adds	r3, #60	; 0x3c
 800175c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001760:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	787c      	ldrb	r4, [r7, #1]
 8001768:	78ba      	ldrb	r2, [r7, #2]
 800176a:	78f9      	ldrb	r1, [r7, #3]
 800176c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4623      	mov	r3, r4
 800177e:	f003 fed1 	bl	8005524 <USB_HC_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}

08001798 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_HCD_HC_Halt+0x1e>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e00f      	b.n	80017d6 <HAL_HCD_HC_Halt+0x3e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 f921 	bl	8005a0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	70fb      	strb	r3, [r7, #3]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70bb      	strb	r3, [r7, #2]
 80017f6:	4613      	mov	r3, r2
 80017f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	333b      	adds	r3, #59	; 0x3b
 8001808:	78ba      	ldrb	r2, [r7, #2]
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	333f      	adds	r3, #63	; 0x3f
 800181a:	787a      	ldrb	r2, [r7, #1]
 800181c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800181e:	7c3b      	ldrb	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d112      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2203      	movs	r2, #3
 8001834:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	333d      	adds	r3, #61	; 0x3d
 8001844:	7f3a      	ldrb	r2, [r7, #28]
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e008      	b.n	800185c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b03      	cmp	r3, #3
 8001860:	f200 80c6 	bhi.w	80019f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800187d 	.word	0x0800187d
 8001870:	080019dd 	.word	0x080019dd
 8001874:	080018e1 	.word	0x080018e1
 8001878:	0800195f 	.word	0x0800195f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800187c:	7c3b      	ldrb	r3, [r7, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 80b8 	bne.w	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001884:	78bb      	ldrb	r3, [r7, #2]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 80b4 	bne.w	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800188c:	8b3b      	ldrh	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d108      	bne.n	80018a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3355      	adds	r3, #85	; 0x55
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3355      	adds	r3, #85	; 0x55
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3342      	adds	r3, #66	; 0x42
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ca:	e093      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	3342      	adds	r3, #66	; 0x42
 80018da:	2202      	movs	r2, #2
 80018dc:	701a      	strb	r2, [r3, #0]
      break;
 80018de:	e089      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018e0:	78bb      	ldrb	r3, [r7, #2]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11d      	bne.n	8001922 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3355      	adds	r3, #85	; 0x55
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3342      	adds	r3, #66	; 0x42
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800190c:	e073      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3342      	adds	r3, #66	; 0x42
 800191c:	2202      	movs	r2, #2
 800191e:	701a      	strb	r2, [r3, #0]
      break;
 8001920:	e069      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3354      	adds	r3, #84	; 0x54
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3342      	adds	r3, #66	; 0x42
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
      break;
 8001948:	e055      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3342      	adds	r3, #66	; 0x42
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
      break;
 800195c:	e04b      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11d      	bne.n	80019a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3355      	adds	r3, #85	; 0x55
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	3342      	adds	r3, #66	; 0x42
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800198a:	e034      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3342      	adds	r3, #66	; 0x42
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	e02a      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3354      	adds	r3, #84	; 0x54
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3342      	adds	r3, #66	; 0x42
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
      break;
 80019c6:	e016      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3342      	adds	r3, #66	; 0x42
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
      break;
 80019da:	e00c      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3342      	adds	r3, #66	; 0x42
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3344      	adds	r3, #68	; 0x44
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	8b3a      	ldrh	r2, [r7, #24]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	202c      	movs	r0, #44	; 0x2c
 8001a10:	fb00 f303 	mul.w	r3, r0, r3
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	; 0x4c
 8001a18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3360      	adds	r3, #96	; 0x60
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3350      	adds	r3, #80	; 0x50
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3339      	adds	r3, #57	; 0x39
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3361      	adds	r3, #97	; 0x61
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	222c      	movs	r2, #44	; 0x2c
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	3338      	adds	r3, #56	; 0x38
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	18d1      	adds	r1, r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f003 fe74 	bl	8005768 <USB_HC_StartXfer>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop

08001a8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fb75 	bl	8005192 <USB_GetMode>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 80f6 	bne.w	8001c9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fb59 	bl	800516c <USB_ReadInterrupts>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80ec 	beq.w	8001c9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fb50 	bl	800516c <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ad6:	d104      	bne.n	8001ae2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fb40 	bl	800516c <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001af6:	d104      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fb30 	bl	800516c <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fb20 	bl	800516c <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d103      	bne.n	8001b3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fb12 	bl	800516c <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b52:	d11c      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b6e:	2110      	movs	r1, #16
 8001b70:	6938      	ldr	r0, [r7, #16]
 8001b72:	f003 fa01 	bl	8004f78 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b76:	6938      	ldr	r0, [r7, #16]
 8001b78:	f003 fa32 	bl	8004fe0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fc08 	bl	8005398 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f006 f9d5 	bl	8007f38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 faea 	bl	800516c <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba2:	d102      	bne.n	8001baa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f001 f89e 	bl	8002ce6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fadc 	bl	800516c <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d106      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f006 f99e 	bl	8007f00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 facb 	bl	800516c <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d101      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x158>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_HCD_IRQHandler+0x15a>
 8001be4:	2300      	movs	r3, #0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0210 	bic.w	r2, r2, #16
 8001bf8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 ffa1 	bl	8002b42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0210 	orr.w	r2, r2, #16
 8001c0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 faa9 	bl	800516c <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c24:	d13a      	bne.n	8001c9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fede 	bl	80059ec <USB_HC_ReadInterrupt>
 8001c30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e025      	b.n	8001c84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d018      	beq.n	8001c7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c62:	d106      	bne.n	8001c72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8ab 	bl	8001dc6 <HCD_HC_IN_IRQHandler>
 8001c70:	e005      	b.n	8001c7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4619      	mov	r1, r3
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fbf9 	bl	8002470 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3d4      	bcc.n	8001c38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	e000      	b.n	8001c9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001c9a:	bf00      	nop
    }
  }
}
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_HCD_Start+0x16>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e013      	b.n	8001ce0 <HAL_HCD_Start+0x3e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fbca 	bl	8005460 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 f8e2 	bl	8004e9a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_HCD_Stop+0x16>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e00d      	b.n	8001d1a <HAL_HCD_Stop+0x32>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 ffb8 	bl	8005c80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fb6c 	bl	800540c <USB_ResetPort>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3360      	adds	r3, #96	; 0x60
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3350      	adds	r3, #80	; 0x50
 8001d80:	681b      	ldr	r3, [r3, #0]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fbb0 	bl	8005500 <USB_GetCurrentFrame>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fb8b 	bl	80054d2 <USB_GetHostSpeed>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d11a      	bne.n	8001e2c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	461a      	mov	r2, r3
 8001e04:	2304      	movs	r3, #4
 8001e06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3361      	adds	r3, #97	; 0x61
 8001e16:	2206      	movs	r2, #6
 8001e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fdf2 	bl	8005a0e <USB_HC_Halt>
 8001e2a:	e0af      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e42:	d11b      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3361      	adds	r3, #97	; 0x61
 8001e66:	2207      	movs	r2, #7
 8001e68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fdca 	bl	8005a0e <USB_HC_Halt>
 8001e7a:	e087      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d109      	bne.n	8001ea6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	6093      	str	r3, [r2, #8]
 8001ea4:	e072      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11a      	bne.n	8001ef2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2308      	movs	r3, #8
 8001ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3361      	adds	r3, #97	; 0x61
 8001edc:	2205      	movs	r2, #5
 8001ede:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fd8f 	bl	8005a0e <USB_HC_Halt>
 8001ef0:	e04c      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f08:	d11b      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	461a      	mov	r2, r3
 8001f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3361      	adds	r3, #97	; 0x61
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fd67 	bl	8005a0e <USB_HC_Halt>
 8001f40:	e024      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d119      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3361      	adds	r3, #97	; 0x61
 8001f78:	2206      	movs	r2, #6
 8001f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fd41 	bl	8005a0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa2:	d112      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fd2d 	bl	8005a0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fc8:	e24e      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	f040 80df 	bne.w	80021a0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3348      	adds	r3, #72	; 0x48
 8001ff8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0159      	lsls	r1, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	440b      	add	r3, r1
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800200c:	1ad2      	subs	r2, r2, r3
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	202c      	movs	r0, #44	; 0x2c
 8002014:	fb00 f303 	mul.w	r3, r0, r3
 8002018:	440b      	add	r3, r1
 800201a:	3350      	adds	r3, #80	; 0x50
 800201c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3361      	adds	r3, #97	; 0x61
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	335c      	adds	r3, #92	; 0x5c
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	461a      	mov	r2, r3
 8002050:	2301      	movs	r3, #1
 8002052:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	333f      	adds	r3, #63	; 0x3f
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	333f      	adds	r3, #63	; 0x3f
 8002076:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002078:	2b02      	cmp	r3, #2
 800207a:	d111      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fcc1 	bl	8005a0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	461a      	mov	r2, r3
 800209a:	2310      	movs	r3, #16
 800209c:	6093      	str	r3, [r2, #8]
 800209e:	e03a      	b.n	8002116 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	333f      	adds	r3, #63	; 0x3f
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d009      	beq.n	80020c8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	333f      	adds	r3, #63	; 0x3f
 80020c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d126      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	0151      	lsls	r1, r2, #5
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	440a      	add	r2, r1
 80020de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	b2d9      	uxtb	r1, r3
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	202c      	movs	r0, #44	; 0x2c
 8002104:	fb00 f303 	mul.w	r3, r0, r3
 8002108:	4413      	add	r3, r2
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f005 ff1f 	bl	8007f54 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d12b      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3348      	adds	r3, #72	; 0x48
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	202c      	movs	r0, #44	; 0x2c
 8002134:	fb00 f202 	mul.w	r2, r0, r2
 8002138:	440a      	add	r2, r1
 800213a:	3240      	adds	r2, #64	; 0x40
 800213c:	8812      	ldrh	r2, [r2, #0]
 800213e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 818e 	beq.w	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3354      	adds	r3, #84	; 0x54
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2d8      	uxtb	r0, r3
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3354      	adds	r3, #84	; 0x54
 8002170:	4602      	mov	r2, r0
 8002172:	701a      	strb	r2, [r3, #0]
}
 8002174:	e178      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3354      	adds	r3, #84	; 0x54
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2d8      	uxtb	r0, r3
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3354      	adds	r3, #84	; 0x54
 800219a:	4602      	mov	r2, r0
 800219c:	701a      	strb	r2, [r3, #0]
}
 800219e:	e163      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f040 80f6 	bne.w	80023a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3361      	adds	r3, #97	; 0x61
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d109      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3360      	adds	r3, #96	; 0x60
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e0c9      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d109      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3360      	adds	r3, #96	; 0x60
 8002202:	2205      	movs	r2, #5
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e0b5      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3361      	adds	r3, #97	; 0x61
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d009      	beq.n	8002230 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3361      	adds	r3, #97	; 0x61
 800222a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800222c:	2b08      	cmp	r3, #8
 800222e:	d150      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	335c      	adds	r3, #92	; 0x5c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	202c      	movs	r0, #44	; 0x2c
 8002248:	fb00 f303 	mul.w	r3, r0, r3
 800224c:	440b      	add	r3, r1
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d912      	bls.n	800228c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	335c      	adds	r3, #92	; 0x5c
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3360      	adds	r3, #96	; 0x60
 8002286:	2204      	movs	r2, #4
 8002288:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800228a:	e073      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3360      	adds	r3, #96	; 0x60
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022d0:	e050      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d122      	bne.n	800232c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3360      	adds	r3, #96	; 0x60
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002316:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e023      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3361      	adds	r3, #97	; 0x61
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b07      	cmp	r3, #7
 800233e:	d119      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	335c      	adds	r3, #92	; 0x5c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	202c      	movs	r0, #44	; 0x2c
 8002358:	fb00 f303 	mul.w	r3, r0, r3
 800235c:	440b      	add	r3, r1
 800235e:	335c      	adds	r3, #92	; 0x5c
 8002360:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	2204      	movs	r2, #4
 8002372:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2302      	movs	r3, #2
 8002384:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	b2d9      	uxtb	r1, r3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	202c      	movs	r0, #44	; 0x2c
 8002390:	fb00 f303 	mul.w	r3, r0, r3
 8002394:	4413      	add	r3, r2
 8002396:	3360      	adds	r3, #96	; 0x60
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f005 fdd9 	bl	8007f54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023a2:	e061      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d156      	bne.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	333f      	adds	r3, #63	; 0x3f
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d111      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	335c      	adds	r3, #92	; 0x5c
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fb0f 	bl	8005a0e <USB_HC_Halt>
 80023f0:	e031      	b.n	8002456 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	333f      	adds	r3, #63	; 0x3f
 8002414:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002416:	2b02      	cmp	r3, #2
 8002418:	d11d      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	335c      	adds	r3, #92	; 0x5c
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d110      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3361      	adds	r3, #97	; 0x61
 8002442:	2203      	movs	r2, #3
 8002444:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fadc 	bl	8005a0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2310      	movs	r3, #16
 8002466:	6093      	str	r3, [r2, #8]
}
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11a      	bne.n	80024d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	2304      	movs	r3, #4
 80024b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3361      	adds	r3, #97	; 0x61
 80024c0:	2206      	movs	r2, #6
 80024c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fa9d 	bl	8005a0e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024d4:	e331      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d12e      	bne.n	800254a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	461a      	mov	r2, r3
 80024fa:	2320      	movs	r3, #32
 80024fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	333d      	adds	r3, #61	; 0x3d
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 8313 	bne.w	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	333d      	adds	r3, #61	; 0x3d
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3360      	adds	r3, #96	; 0x60
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f003 fa63 	bl	8005a0e <USB_HC_Halt>
}
 8002548:	e2f7      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	d112      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fa44 	bl	8005a0e <USB_HC_Halt>
}
 8002586:	e2d8      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d140      	bne.n	8002620 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	335c      	adds	r3, #92	; 0x5c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d111      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333d      	adds	r3, #61	; 0x3d
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3361      	adds	r3, #97	; 0x61
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f003 f9f8 	bl	8005a0e <USB_HC_Halt>
}
 800261e:	e28c      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d12c      	bne.n	8002690 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3361      	adds	r3, #97	; 0x61
 8002644:	2204      	movs	r2, #4
 8002646:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	333d      	adds	r3, #61	; 0x3d
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	335c      	adds	r3, #92	; 0x5c
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f003 f9c9 	bl	8005a0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	2340      	movs	r3, #64	; 0x40
 800268c:	6093      	str	r3, [r2, #8]
}
 800268e:	e254      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11a      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	2308      	movs	r3, #8
 80026b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	2205      	movs	r2, #5
 80026c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 f99a 	bl	8005a0e <USB_HC_Halt>
}
 80026da:	e22e      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d140      	bne.n	8002774 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3361      	adds	r3, #97	; 0x61
 8002712:	2203      	movs	r2, #3
 8002714:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333d      	adds	r3, #61	; 0x3d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d112      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333c      	adds	r3, #60	; 0x3c
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333d      	adds	r3, #61	; 0x3d
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f957 	bl	8005a0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2310      	movs	r3, #16
 8002770:	6093      	str	r3, [r2, #8]
}
 8002772:	e1e2      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d164      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d111      	bne.n	80027b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3361      	adds	r3, #97	; 0x61
 80027a0:	2206      	movs	r2, #6
 80027a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 f92d 	bl	8005a0e <USB_HC_Halt>
 80027b4:	e044      	b.n	8002840 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	202c      	movs	r0, #44	; 0x2c
 80027ce:	fb00 f303 	mul.w	r3, r0, r3
 80027d2:	440b      	add	r3, r1
 80027d4:	335c      	adds	r3, #92	; 0x5c
 80027d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	335c      	adds	r3, #92	; 0x5c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d920      	bls.n	800282e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3360      	adds	r3, #96	; 0x60
 800280c:	2204      	movs	r2, #4
 800280e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	202c      	movs	r0, #44	; 0x2c
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	4413      	add	r3, r2
 8002820:	3360      	adds	r3, #96	; 0x60
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f005 fb94 	bl	8007f54 <HAL_HCD_HC_NotifyURBChange_Callback>
 800282c:	e008      	b.n	8002840 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3360      	adds	r3, #96	; 0x60
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	461a      	mov	r2, r3
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	6093      	str	r3, [r2, #8]
}
 8002852:	e172      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d11b      	bne.n	80028a4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3361      	adds	r3, #97	; 0x61
 800287a:	2208      	movs	r2, #8
 800287c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f003 f8c0 	bl	8005a0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	461a      	mov	r2, r3
 800289c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a0:	6093      	str	r3, [r2, #8]
}
 80028a2:	e14a      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	f040 813f 	bne.w	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d17d      	bne.n	80029cc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3360      	adds	r3, #96	; 0x60
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	333f      	adds	r3, #63	; 0x3f
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d00a      	beq.n	800290c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	333f      	adds	r3, #63	; 0x3f
 8002904:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002906:	2b03      	cmp	r3, #3
 8002908:	f040 8100 	bne.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d113      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3355      	adds	r3, #85	; 0x55
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2d8      	uxtb	r0, r3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3355      	adds	r3, #85	; 0x55
 8002938:	4602      	mov	r2, r0
 800293a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 80e3 	bne.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	334c      	adds	r3, #76	; 0x4c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80d8 	beq.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	334c      	adds	r3, #76	; 0x4c
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	202c      	movs	r0, #44	; 0x2c
 8002972:	fb00 f202 	mul.w	r2, r0, r2
 8002976:	440a      	add	r2, r1
 8002978:	3240      	adds	r2, #64	; 0x40
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	4413      	add	r3, r2
 800297e:	3b01      	subs	r3, #1
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	202c      	movs	r0, #44	; 0x2c
 8002986:	fb00 f202 	mul.w	r2, r0, r2
 800298a:	440a      	add	r2, r1
 800298c:	3240      	adds	r2, #64	; 0x40
 800298e:	8812      	ldrh	r2, [r2, #0]
 8002990:	fbb3 f3f2 	udiv	r3, r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b5 	beq.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3355      	adds	r3, #85	; 0x55
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2d8      	uxtb	r0, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3355      	adds	r3, #85	; 0x55
 80029c6:	4602      	mov	r2, r0
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e09f      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3361      	adds	r3, #97	; 0x61
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d109      	bne.n	80029f4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3360      	adds	r3, #96	; 0x60
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e08b      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d109      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e077      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3361      	adds	r3, #97	; 0x61
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d109      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3360      	adds	r3, #96	; 0x60
 8002a3e:	2205      	movs	r2, #5
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e063      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3361      	adds	r3, #97	; 0x61
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d009      	beq.n	8002a6c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d14f      	bne.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	335c      	adds	r3, #92	; 0x5c
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	202c      	movs	r0, #44	; 0x2c
 8002a84:	fb00 f303 	mul.w	r3, r0, r3
 8002a88:	440b      	add	r3, r1
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	335c      	adds	r3, #92	; 0x5c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d912      	bls.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3360      	adds	r3, #96	; 0x60
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e021      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002af0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	461a      	mov	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	b2d9      	uxtb	r1, r3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	202c      	movs	r0, #44	; 0x2c
 8002b28:	fb00 f303 	mul.w	r3, r0, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f005 fa0d 	bl	8007f54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08a      	sub	sp, #40	; 0x28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	0c5b      	lsrs	r3, r3, #17
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d004      	beq.n	8002b88 <HCD_RXQLVL_IRQHandler+0x46>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	f000 80a9 	beq.w	8002cd8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b86:	e0aa      	b.n	8002cde <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80a6 	beq.w	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3344      	adds	r3, #68	; 0x44
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 809b 	beq.w	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3350      	adds	r3, #80	; 0x50
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	441a      	add	r2, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	202c      	movs	r0, #44	; 0x2c
 8002bc0:	fb00 f303 	mul.w	r3, r0, r3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	; 0x4c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d87a      	bhi.n	8002cc4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3344      	adds	r3, #68	; 0x44
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	b292      	uxth	r2, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f002 fa68 	bl	80050bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3344      	adds	r3, #68	; 0x44
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	441a      	add	r2, r3
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	202c      	movs	r0, #44	; 0x2c
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3344      	adds	r3, #68	; 0x44
 8002c0e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3350      	adds	r3, #80	; 0x50
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	441a      	add	r2, r3
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	202c      	movs	r0, #44	; 0x2c
 8002c2a:	fb00 f303 	mul.w	r3, r0, r3
 8002c2e:	440b      	add	r3, r1
 8002c30:	3350      	adds	r3, #80	; 0x50
 8002c32:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	0cdb      	lsrs	r3, r3, #19
 8002c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3340      	adds	r3, #64	; 0x40
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d13c      	bne.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d039      	beq.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3354      	adds	r3, #84	; 0x54
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2d8      	uxtb	r0, r3
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3354      	adds	r3, #84	; 0x54
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	701a      	strb	r2, [r3, #0]
      break;
 8002cc2:	e00b      	b.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	701a      	strb	r2, [r3, #0]
      break;
 8002cd6:	e001      	b.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cdc:	bf00      	nop
  }
}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d12:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d10b      	bne.n	8002d36 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f005 f8f7 	bl	8007f1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d132      	bne.n	8002da6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d126      	bne.n	8002da0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d113      	bne.n	8002d82 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d64:	d106      	bne.n	8002d74 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fb13 	bl	8005398 <USB_InitFSLSPClkSel>
 8002d72:	e011      	b.n	8002d98 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fb0c 	bl	8005398 <USB_InitFSLSPClkSel>
 8002d80:	e00a      	b.n	8002d98 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d90:	461a      	mov	r2, r3
 8002d92:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d96:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f005 f8e9 	bl	8007f70 <HAL_HCD_PortEnabled_Callback>
 8002d9e:	e002      	b.n	8002da6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f005 f8f3 	bl	8007f8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d103      	bne.n	8002db8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 0320 	orr.w	r3, r3, #32
 8002db6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e12b      	b.n	8003036 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fe32 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e30:	f001 fa20 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8002e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a81      	ldr	r2, [pc, #516]	; (8003040 <HAL_I2C_Init+0x274>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d807      	bhi.n	8002e50 <HAL_I2C_Init+0x84>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_I2C_Init+0x278>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e006      	b.n	8002e5e <HAL_I2C_Init+0x92>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a7d      	ldr	r2, [pc, #500]	; (8003048 <HAL_I2C_Init+0x27c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0e7      	b.n	8003036 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a78      	ldr	r2, [pc, #480]	; (800304c <HAL_I2C_Init+0x280>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9b      	lsrs	r3, r3, #18
 8002e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_I2C_Init+0x274>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d802      	bhi.n	8002ea0 <HAL_I2C_Init+0xd4>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	e009      	b.n	8002eb4 <HAL_I2C_Init+0xe8>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a69      	ldr	r2, [pc, #420]	; (8003050 <HAL_I2C_Init+0x284>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	495c      	ldr	r1, [pc, #368]	; (8003040 <HAL_I2C_Init+0x274>)
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	d819      	bhi.n	8002f08 <HAL_I2C_Init+0x13c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e59      	subs	r1, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee2:	1c59      	adds	r1, r3, #1
 8002ee4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ee8:	400b      	ands	r3, r1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_I2C_Init+0x138>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e59      	subs	r1, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	e051      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e04f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <HAL_I2C_Init+0x168>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e012      	b.n	8002f5a <HAL_I2C_Init+0x18e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x196>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e022      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10e      	bne.n	8002f88 <HAL_I2C_Init+0x1bc>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e58      	subs	r0, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	440b      	add	r3, r1
 8002f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	e00f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	6809      	ldr	r1, [r1, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6911      	ldr	r1, [r2, #16]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	000186a0 	.word	0x000186a0
 8003044:	001e847f 	.word	0x001e847f
 8003048:	003d08ff 	.word	0x003d08ff
 800304c:	431bde83 	.word	0x431bde83
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e128      	b.n	80032b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a90      	ldr	r2, [pc, #576]	; (80032c0 <HAL_I2S_Init+0x26c>)
 800307e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fd fd33 	bl	8000aec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2202      	movs	r2, #2
 80030a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d060      	beq.n	8003174 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030ba:	2310      	movs	r3, #16
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e001      	b.n	80030c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d802      	bhi.n	80030d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f001 f9d8 	bl	8004488 <HAL_RCCEx_GetPeriphCLKFreq>
 80030d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e2:	d125      	bne.n	8003130 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	3305      	adds	r3, #5
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e01f      	b.n	800314e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	fbb2 f2f3 	udiv	r2, r2, r3
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	3305      	adds	r3, #5
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	e00e      	b.n	800314e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fbb2 f2f3 	udiv	r2, r2, r3
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	3305      	adds	r3, #5
 800314c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4a5c      	ldr	r2, [pc, #368]	; (80032c4 <HAL_I2S_Init+0x270>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	e003      	b.n	800317c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003174:	2302      	movs	r3, #2
 8003176:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d902      	bls.n	8003188 <HAL_I2S_Init+0x134>
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2bff      	cmp	r3, #255	; 0xff
 8003186:	d907      	bls.n	8003198 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f043 0210 	orr.w	r2, r3, #16
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e08f      	b.n	80032b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	ea42 0103 	orr.w	r1, r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6851      	ldr	r1, [r2, #4]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68d2      	ldr	r2, [r2, #12]
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6992      	ldr	r2, [r2, #24]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d161      	bne.n	80032a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_I2S_Init+0x274>)
 80031e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_I2S_Init+0x278>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <HAL_I2S_Init+0x1a4>
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_I2S_Init+0x27c>)
 80031f6:	e001      	b.n	80031fc <HAL_I2S_Init+0x1a8>
 80031f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	4932      	ldr	r1, [pc, #200]	; (80032cc <HAL_I2S_Init+0x278>)
 8003204:	428a      	cmp	r2, r1
 8003206:	d101      	bne.n	800320c <HAL_I2S_Init+0x1b8>
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_I2S_Init+0x27c>)
 800320a:	e001      	b.n	8003210 <HAL_I2S_Init+0x1bc>
 800320c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003210:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003214:	f023 030f 	bic.w	r3, r3, #15
 8003218:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <HAL_I2S_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_I2S_Init+0x1d4>
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_I2S_Init+0x27c>)
 8003226:	e001      	b.n	800322c <HAL_I2S_Init+0x1d8>
 8003228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322c:	2202      	movs	r2, #2
 800322e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a25      	ldr	r2, [pc, #148]	; (80032cc <HAL_I2S_Init+0x278>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_I2S_Init+0x1ea>
 800323a:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_I2S_Init+0x27c>)
 800323c:	e001      	b.n	8003242 <HAL_I2S_Init+0x1ee>
 800323e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324e:	d003      	beq.n	8003258 <HAL_I2S_Init+0x204>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e001      	b.n	8003264 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800326e:	4313      	orrs	r3, r2
 8003270:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003278:	4313      	orrs	r3, r2
 800327a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003282:	4313      	orrs	r3, r2
 8003284:	b29a      	uxth	r2, r3
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	4313      	orrs	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003290:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_I2S_Init+0x278>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_I2S_Init+0x24c>
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_I2S_Init+0x27c>)
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x250>
 80032a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a4:	897a      	ldrh	r2, [r7, #10]
 80032a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	080033cb 	.word	0x080033cb
 80032c4:	cccccccd 	.word	0xcccccccd
 80032c8:	080034e1 	.word	0x080034e1
 80032cc:	40003800 	.word	0x40003800
 80032d0:	40003400 	.word	0x40003400

080032d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003354:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb8 	bl	80032d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	b292      	uxth	r2, r2
 8003380:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10e      	bne.n	80033c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff93 	bl	80032e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d13a      	bne.n	800345c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d109      	bne.n	8003404 <I2S_IRQHandler+0x3a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d102      	bne.n	8003404 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffb4 	bl	800336c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d126      	bne.n	800345c <I2S_IRQHandler+0x92>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d11f      	bne.n	800345c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800342a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ff50 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d136      	bne.n	80034d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d109      	bne.n	8003486 <I2S_IRQHandler+0xbc>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d102      	bne.n	8003486 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff45 	bl	8003310 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d122      	bne.n	80034d6 <I2S_IRQHandler+0x10c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d11b      	bne.n	80034d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff13 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a92      	ldr	r2, [pc, #584]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034fa:	4b92      	ldr	r3, [pc, #584]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034fc:	e001      	b.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a8b      	ldr	r2, [pc, #556]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003518:	4b8a      	ldr	r3, [pc, #552]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800351a:	e001      	b.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352c:	d004      	beq.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 8099 	bne.w	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d107      	bne.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f925 	bl	800379c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9c8 	bl	80038fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d13a      	bne.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d035      	beq.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6e      	ldr	r2, [pc, #440]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800358a:	4b6e      	ldr	r3, [pc, #440]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800358c:	e001      	b.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800358e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4969      	ldr	r1, [pc, #420]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359a:	428b      	cmp	r3, r1
 800359c:	d101      	bne.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800359e:	4b69      	ldr	r3, [pc, #420]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a0:	e001      	b.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fe88 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	f040 80c3 	bne.w	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80bd 	beq.w	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003612:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a49      	ldr	r2, [pc, #292]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800361e:	4b49      	ldr	r3, [pc, #292]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003620:	e001      	b.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4944      	ldr	r1, [pc, #272]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800362e:	428b      	cmp	r3, r1
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003632:	4b44      	ldr	r3, [pc, #272]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800363e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fe4a 	bl	80032fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003668:	e089      	b.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d107      	bne.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8be 	bl	8003800 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8fd 	bl	8003898 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d12f      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02a      	beq.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ce:	e001      	b.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4919      	ldr	r1, [pc, #100]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036dc:	428b      	cmp	r3, r1
 80036de:	d101      	bne.n	80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e2:	e001      	b.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fdfa 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d136      	bne.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d031      	beq.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a07      	ldr	r2, [pc, #28]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003728:	e001      	b.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800372a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4902      	ldr	r1, [pc, #8]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003736:	428b      	cmp	r3, r1
 8003738:	d106      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800373a:	4b02      	ldr	r3, [pc, #8]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373c:	e006      	b.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800373e:	bf00      	nop
 8003740:	40003800 	.word	0x40003800
 8003744:	40003400 	.word	0x40003400
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003760:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fdc0 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377c:	e000      	b.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800377e:	bf00      	nop
}
 8003780:	bf00      	nop
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c99      	adds	r1, r3, #2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6251      	str	r1, [r2, #36]	; 0x24
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d113      	bne.n	80037f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ffc9 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c99      	adds	r1, r3, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6251      	str	r1, [r2, #36]	; 0x24
 8003812:	8819      	ldrh	r1, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <I2SEx_TxISR_I2SExt+0x22>
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 8003820:	e001      	b.n	8003826 <I2SEx_TxISR_I2SExt+0x26>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	460a      	mov	r2, r1
 8003828:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d121      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <I2SEx_TxISR_I2SExt+0x50>
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 800384e:	e001      	b.n	8003854 <I2SEx_TxISR_I2SExt+0x54>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	490d      	ldr	r1, [pc, #52]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d101      	bne.n	8003864 <I2SEx_TxISR_I2SExt+0x64>
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 8003862:	e001      	b.n	8003868 <I2SEx_TxISR_I2SExt+0x68>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff81 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40003800 	.word	0x40003800
 8003894:	40003400 	.word	0x40003400

08003898 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68d8      	ldr	r0, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	1c99      	adds	r1, r3, #2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038b0:	b282      	uxth	r2, r0
 80038b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d113      	bne.n	80038f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff4a 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <I2SEx_RxISR_I2SExt+0x16>
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 8003910:	e001      	b.n	8003916 <I2SEx_RxISR_I2SExt+0x1a>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	68d8      	ldr	r0, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	1c99      	adds	r1, r3, #2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003922:	b282      	uxth	r2, r0
 8003924:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d121      	bne.n	8003982 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <I2SEx_RxISR_I2SExt+0x50>
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 800394a:	e001      	b.n	8003950 <I2SEx_RxISR_I2SExt+0x54>
 800394c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	490d      	ldr	r1, [pc, #52]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 8003958:	428b      	cmp	r3, r1
 800395a:	d101      	bne.n	8003960 <I2SEx_RxISR_I2SExt+0x64>
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 800395e:	e001      	b.n	8003964 <I2SEx_RxISR_I2SExt+0x68>
 8003960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003964:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003968:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff03 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40003800 	.word	0x40003800
 8003990:	40003400 	.word	0x40003400

08003994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e267      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d075      	beq.n	8003a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039b2:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039be:	4b85      	ldr	r3, [pc, #532]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d112      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b82      	ldr	r3, [pc, #520]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b7e      	ldr	r3, [pc, #504]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05b      	beq.n	8003a9c <HAL_RCC_OscConfig+0x108>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d157      	bne.n	8003a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e242      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x74>
 80039fa:	4b76      	ldr	r3, [pc, #472]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a75      	ldr	r2, [pc, #468]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e01d      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x98>
 8003a12:	4b70      	ldr	r3, [pc, #448]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6f      	ldr	r2, [pc, #444]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b6d      	ldr	r3, [pc, #436]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6c      	ldr	r2, [pc, #432]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	4b69      	ldr	r3, [pc, #420]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a68      	ldr	r2, [pc, #416]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fabc 	bl	8000fc8 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd fab8 	bl	8000fc8 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e207      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b5b      	ldr	r3, [pc, #364]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0xc0>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd faa8 	bl	8000fc8 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd faa4 	bl	8000fc8 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1f3      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0xe8>
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d063      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b44      	ldr	r3, [pc, #272]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1c7      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4937      	ldr	r1, [pc, #220]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fa5d 	bl	8000fc8 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fd fa59 	bl	8000fc8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1a8      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4925      	ldr	r1, [pc, #148]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fa3c 	bl	8000fc8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fd fa38 	bl	8000fc8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e187      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d036      	beq.n	8003bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fa1c 	bl	8000fc8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd fa18 	bl	8000fc8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e167      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x200>
 8003bb2:	e01b      	b.n	8003bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fd fa05 	bl	8000fc8 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fa01 	bl	8000fc8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d907      	bls.n	8003be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e150      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	42470000 	.word	0x42470000
 8003bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ea      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8097 	beq.w	8003d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b81      	ldr	r3, [pc, #516]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a7c      	ldr	r2, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b77      	ldr	r3, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d118      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c36:	4b74      	ldr	r3, [pc, #464]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a73      	ldr	r2, [pc, #460]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c42:	f7fd f9c1 	bl	8000fc8 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4a:	f7fd f9bd 	bl	8000fc8 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e10c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b6a      	ldr	r3, [pc, #424]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2ea>
 8003c70:	4b64      	ldr	r3, [pc, #400]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	4a63      	ldr	r2, [pc, #396]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x30c>
 8003c86:	4b5f      	ldr	r3, [pc, #380]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	4b5c      	ldr	r3, [pc, #368]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a5b      	ldr	r2, [pc, #364]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003ca0:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a54      	ldr	r2, [pc, #336]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd f982 	bl	8000fc8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd f97e 	bl	8000fc8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0cb      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x334>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fd f96c 	bl	8000fc8 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fd f968 	bl	8000fc8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0b5      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ee      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	4a38      	ldr	r2, [pc, #224]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a1 	beq.w	8003e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d32:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d05c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d141      	bne.n	8003dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f93c 	bl	8000fc8 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd f938 	bl	8000fc8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e087      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd f911 	bl	8000fc8 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd f90d 	bl	8000fc8 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e05c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x416>
 8003dc8:	e054      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd f8fa 	bl	8000fc8 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fd f8f6 	bl	8000fc8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e045      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x444>
 8003df6:	e03d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e038      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4ec>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d121      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d11a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d111      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0cc      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b68      	ldr	r3, [pc, #416]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d90c      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0b8      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed8:	4b59      	ldr	r3, [pc, #356]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef0:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b50      	ldr	r3, [pc, #320]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	494d      	ldr	r1, [pc, #308]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d044      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e067      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b37      	ldr	r3, [pc, #220]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4934      	ldr	r1, [pc, #208]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fd f828 	bl	8000fc8 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fd f824 	bl	8000fc8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e04f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d20c      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e032      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4916      	ldr	r1, [pc, #88]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	490e      	ldr	r1, [pc, #56]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800400a:	f000 f821 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490a      	ldr	r1, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	fa22 f303 	lsr.w	r3, r2, r3
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc ff88 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00
 8004040:	40023800 	.word	0x40023800
 8004044:	08008e3c 	.word	0x08008e3c
 8004048:	20000000 	.word	0x20000000
 800404c:	20000004 	.word	0x20000004

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b094      	sub	sp, #80	; 0x50
 8004056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
 800405c:	2300      	movs	r3, #0
 800405e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004060:	2300      	movs	r3, #0
 8004062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004068:	4b79      	ldr	r3, [pc, #484]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d00d      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x40>
 8004074:	2b08      	cmp	r3, #8
 8004076:	f200 80e1 	bhi.w	800423c <HAL_RCC_GetSysClockFreq+0x1ec>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x34>
 800407e:	2b04      	cmp	r3, #4
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x3a>
 8004082:	e0db      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b73      	ldr	r3, [pc, #460]	; (8004254 <HAL_RCC_GetSysClockFreq+0x204>)
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004088:	e0db      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800408a:	4b73      	ldr	r3, [pc, #460]	; (8004258 <HAL_RCC_GetSysClockFreq+0x208>)
 800408c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800408e:	e0d8      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409a:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d063      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b6a      	ldr	r3, [pc, #424]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80040b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ba:	2300      	movs	r3, #0
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
 80040be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	0159      	lsls	r1, r3, #5
 80040d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d4:	0150      	lsls	r0, r2, #5
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4621      	mov	r1, r4
 80040dc:	1a51      	subs	r1, r2, r1
 80040de:	6139      	str	r1, [r7, #16]
 80040e0:	4629      	mov	r1, r5
 80040e2:	eb63 0301 	sbc.w	r3, r3, r1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040f4:	4659      	mov	r1, fp
 80040f6:	018b      	lsls	r3, r1, #6
 80040f8:	4651      	mov	r1, sl
 80040fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040fe:	4651      	mov	r1, sl
 8004100:	018a      	lsls	r2, r1, #6
 8004102:	4651      	mov	r1, sl
 8004104:	ebb2 0801 	subs.w	r8, r2, r1
 8004108:	4659      	mov	r1, fp
 800410a:	eb63 0901 	sbc.w	r9, r3, r1
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004122:	4690      	mov	r8, r2
 8004124:	4699      	mov	r9, r3
 8004126:	4623      	mov	r3, r4
 8004128:	eb18 0303 	adds.w	r3, r8, r3
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	462b      	mov	r3, r5
 8004130:	eb49 0303 	adc.w	r3, r9, r3
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004142:	4629      	mov	r1, r5
 8004144:	024b      	lsls	r3, r1, #9
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800414c:	4621      	mov	r1, r4
 800414e:	024a      	lsls	r2, r1, #9
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004156:	2200      	movs	r2, #0
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
 800415a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800415c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004160:	f7fc f832 	bl	80001c8 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4613      	mov	r3, r2
 800416a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800416c:	e058      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b38      	ldr	r3, [pc, #224]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	2200      	movs	r2, #0
 8004176:	4618      	mov	r0, r3
 8004178:	4611      	mov	r1, r2
 800417a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	f04f 0000 	mov.w	r0, #0
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	0159      	lsls	r1, r3, #5
 8004196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419a:	0150      	lsls	r0, r2, #5
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4641      	mov	r1, r8
 80041a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041a6:	4649      	mov	r1, r9
 80041a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041c0:	ebb2 040a 	subs.w	r4, r2, sl
 80041c4:	eb63 050b 	sbc.w	r5, r3, fp
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	00eb      	lsls	r3, r5, #3
 80041d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d6:	00e2      	lsls	r2, r4, #3
 80041d8:	4614      	mov	r4, r2
 80041da:	461d      	mov	r5, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	464b      	mov	r3, r9
 80041e4:	eb45 0303 	adc.w	r3, r5, r3
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041f6:	4629      	mov	r1, r5
 80041f8:	028b      	lsls	r3, r1, #10
 80041fa:	4621      	mov	r1, r4
 80041fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004200:	4621      	mov	r1, r4
 8004202:	028a      	lsls	r2, r1, #10
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420a:	2200      	movs	r2, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	61fa      	str	r2, [r7, #28]
 8004210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004214:	f7fb ffd8 	bl	80001c8 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	3301      	adds	r3, #1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800423a:	e002      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetSysClockFreq+0x204>)
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004244:	4618      	mov	r0, r3
 8004246:	3750      	adds	r7, #80	; 0x50
 8004248:	46bd      	mov	sp, r7
 800424a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	00f42400 	.word	0x00f42400
 8004258:	007a1200 	.word	0x007a1200

0800425c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_RCC_GetHCLKFreq+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000000 	.word	0x20000000

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004278:	f7ff fff0 	bl	800425c <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	08008e4c 	.word	0x08008e4c

0800429c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042a0:	f7ff ffdc 	bl	800425c <HAL_RCC_GetHCLKFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	0b5b      	lsrs	r3, r3, #13
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	4903      	ldr	r1, [pc, #12]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	08008e4c 	.word	0x08008e4c

080042c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d035      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042ec:	4b62      	ldr	r3, [pc, #392]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042f2:	f7fc fe69 	bl	8000fc8 <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042fa:	f7fc fe65 	bl	8000fc8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0b0      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800430c:	4b5b      	ldr	r3, [pc, #364]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	019a      	lsls	r2, r3, #6
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	071b      	lsls	r3, r3, #28
 8004324:	4955      	ldr	r1, [pc, #340]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800432c:	4b52      	ldr	r3, [pc, #328]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004332:	f7fc fe49 	bl	8000fc8 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800433a:	f7fc fe45 	bl	8000fc8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e090      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434c:	4b4b      	ldr	r3, [pc, #300]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8083 	beq.w	800446c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	4b44      	ldr	r3, [pc, #272]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4a43      	ldr	r2, [pc, #268]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004382:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3e      	ldr	r2, [pc, #248]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800438e:	f7fc fe1b 	bl	8000fc8 <HAL_GetTick>
 8004392:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004396:	f7fc fe17 	bl	8000fc8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e062      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a8:	4b35      	ldr	r3, [pc, #212]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043b4:	4b31      	ldr	r3, [pc, #196]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d028      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043d2:	4b2a      	ldr	r3, [pc, #168]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043dc:	4b29      	ldr	r3, [pc, #164]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043e2:	4b28      	ldr	r3, [pc, #160]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043e8:	4a24      	ldr	r2, [pc, #144]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043ee:	4b23      	ldr	r3, [pc, #140]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d114      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fc fde5 	bl	8000fc8 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fc fde1 	bl	8000fc8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e02a      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004418:	4b18      	ldr	r3, [pc, #96]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ee      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004430:	d10d      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	490d      	ldr	r1, [pc, #52]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004458:	6093      	str	r3, [r2, #8]
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004466:	4905      	ldr	r1, [pc, #20]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	42470068 	.word	0x42470068
 800447c:	40023800 	.word	0x40023800
 8004480:	40007000 	.word	0x40007000
 8004484:	42470e40 	.word	0x42470e40

08004488 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d13e      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044a6:	4b23      	ldr	r3, [pc, #140]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d12f      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044be:	617b      	str	r3, [r7, #20]
          break;
 80044c0:	e02f      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ce:	d108      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044d0:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d8:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	e007      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f8:	099b      	lsrs	r3, r3, #6
 80044fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	fb02 f303 	mul.w	r3, r2, r3
 8004504:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	0f1b      	lsrs	r3, r3, #28
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
          break;
 800451a:	e002      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
          break;
 8004520:	bf00      	nop
        }
      }
      break;
 8004522:	bf00      	nop
    }
  }
  return frequency;
 8004524:	697b      	ldr	r3, [r7, #20]
}
 8004526:	4618      	mov	r0, r3
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	00bb8000 	.word	0x00bb8000
 800453c:	007a1200 	.word	0x007a1200
 8004540:	00f42400 	.word	0x00f42400

08004544 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e07b      	b.n	800464e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	d108      	bne.n	8004570 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004566:	d009      	beq.n	800457c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	61da      	str	r2, [r3, #28]
 800456e:	e005      	b.n	800457c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fc fb28 	bl	8000bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	ea42 0103 	orr.w	r1, r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	f003 0104 	and.w	r1, r3, #4
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0210 	and.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800463c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e03f      	b.n	80046e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fc fafd 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2224      	movs	r2, #36	; 0x24
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f928 	bl	80048f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	d17c      	bne.n	800480a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_UART_Transmit+0x2c>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e075      	b.n	800480c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_UART_Transmit+0x3e>
 800472a:	2302      	movs	r3, #2
 800472c:	e06e      	b.n	800480c <HAL_UART_Transmit+0x11c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2221      	movs	r2, #33	; 0x21
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004744:	f7fc fc40 	bl	8000fc8 <HAL_GetTick>
 8004748:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d108      	bne.n	8004772 <HAL_UART_Transmit+0x82>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e003      	b.n	800477a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004782:	e02a      	b.n	80047da <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2200      	movs	r2, #0
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f840 	bl	8004814 <UART_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e036      	b.n	800480c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	3302      	adds	r3, #2
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e007      	b.n	80047cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	3301      	adds	r3, #1
 80047ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1cf      	bne.n	8004784 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	2140      	movs	r1, #64	; 0x40
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f810 	bl	8004814 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e006      	b.n	800480c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
  }
}
 800480c:	4618      	mov	r0, r3
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b090      	sub	sp, #64	; 0x40
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004824:	e050      	b.n	80048c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d04c      	beq.n	80048c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x30>
 8004834:	f7fc fbc8 	bl	8000fc8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004840:	429a      	cmp	r2, r3
 8004842:	d241      	bcs.n	80048c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004864:	637a      	str	r2, [r7, #52]	; 0x34
 8004866:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800486a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e5      	bne.n	8004844 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3314      	adds	r3, #20
 800487e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	613b      	str	r3, [r7, #16]
   return(result);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3314      	adds	r3, #20
 8004896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004898:	623a      	str	r2, [r7, #32]
 800489a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	6a3a      	ldr	r2, [r7, #32]
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e00f      	b.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d09f      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3740      	adds	r7, #64	; 0x40
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b0c0      	sub	sp, #256	; 0x100
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	68d9      	ldr	r1, [r3, #12]
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	ea40 0301 	orr.w	r3, r0, r1
 8004918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	431a      	orrs	r2, r3
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	431a      	orrs	r2, r3
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004948:	f021 010c 	bic.w	r1, r1, #12
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004956:	430b      	orrs	r3, r1
 8004958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	6999      	ldr	r1, [r3, #24]
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	ea40 0301 	orr.w	r3, r0, r1
 8004976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b8f      	ldr	r3, [pc, #572]	; (8004bbc <UART_SetConfig+0x2cc>)
 8004980:	429a      	cmp	r2, r3
 8004982:	d005      	beq.n	8004990 <UART_SetConfig+0xa0>
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b8d      	ldr	r3, [pc, #564]	; (8004bc0 <UART_SetConfig+0x2d0>)
 800498c:	429a      	cmp	r2, r3
 800498e:	d104      	bne.n	800499a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004990:	f7ff fc84 	bl	800429c <HAL_RCC_GetPCLK2Freq>
 8004994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004998:	e003      	b.n	80049a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800499a:	f7ff fc6b 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 800499e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	f040 810c 	bne.w	8004bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ca:	415b      	adcs	r3, r3
 80049cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049d2:	4621      	mov	r1, r4
 80049d4:	eb12 0801 	adds.w	r8, r2, r1
 80049d8:	4629      	mov	r1, r5
 80049da:	eb43 0901 	adc.w	r9, r3, r1
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f2:	4690      	mov	r8, r2
 80049f4:	4699      	mov	r9, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	eb18 0303 	adds.w	r3, r8, r3
 80049fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a00:	462b      	mov	r3, r5
 8004a02:	eb49 0303 	adc.w	r3, r9, r3
 8004a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a1e:	460b      	mov	r3, r1
 8004a20:	18db      	adds	r3, r3, r3
 8004a22:	653b      	str	r3, [r7, #80]	; 0x50
 8004a24:	4613      	mov	r3, r2
 8004a26:	eb42 0303 	adc.w	r3, r2, r3
 8004a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a34:	f7fb fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	011c      	lsls	r4, r3, #4
 8004a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a60:	415b      	adcs	r3, r3
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a68:	4641      	mov	r1, r8
 8004a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a6e:	4649      	mov	r1, r9
 8004a70:	eb43 0b01 	adc.w	fp, r3, r1
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a88:	4692      	mov	sl, r2
 8004a8a:	469b      	mov	fp, r3
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a96:	464b      	mov	r3, r9
 8004a98:	eb4b 0303 	adc.w	r3, fp, r3
 8004a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	18db      	adds	r3, r3, r3
 8004ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aba:	4613      	mov	r3, r2
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aca:	f7fb fb7d 	bl	80001c8 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2264      	movs	r2, #100	; 0x64
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	1acb      	subs	r3, r1, r3
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004aec:	fba3 2302 	umull	r2, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004af8:	441c      	add	r4, r3
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b14:	415b      	adcs	r3, r3
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	1851      	adds	r1, r2, r1
 8004b20:	6339      	str	r1, [r7, #48]	; 0x30
 8004b22:	4649      	mov	r1, r9
 8004b24:	414b      	adcs	r3, r1
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b34:	4659      	mov	r1, fp
 8004b36:	00cb      	lsls	r3, r1, #3
 8004b38:	4651      	mov	r1, sl
 8004b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3e:	4651      	mov	r1, sl
 8004b40:	00ca      	lsls	r2, r1, #3
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	4642      	mov	r2, r8
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b50:	464b      	mov	r3, r9
 8004b52:	460a      	mov	r2, r1
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b70:	460b      	mov	r3, r1
 8004b72:	18db      	adds	r3, r3, r3
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b76:	4613      	mov	r3, r2
 8004b78:	eb42 0303 	adc.w	r3, r2, r3
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b86:	f7fb fb1f 	bl	80001c8 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004b90:	fba3 1302 	umull	r1, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2164      	movs	r1, #100	; 0x64
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	3332      	adds	r3, #50	; 0x32
 8004ba2:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 0207 	and.w	r2, r3, #7
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4422      	add	r2, r4
 8004bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bb8:	e105      	b.n	8004dc6 <UART_SetConfig+0x4d6>
 8004bba:	bf00      	nop
 8004bbc:	40011000 	.word	0x40011000
 8004bc0:	40011400 	.word	0x40011400
 8004bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bda:	4642      	mov	r2, r8
 8004bdc:	464b      	mov	r3, r9
 8004bde:	1891      	adds	r1, r2, r2
 8004be0:	6239      	str	r1, [r7, #32]
 8004be2:	415b      	adcs	r3, r3
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bea:	4641      	mov	r1, r8
 8004bec:	1854      	adds	r4, r2, r1
 8004bee:	4649      	mov	r1, r9
 8004bf0:	eb43 0501 	adc.w	r5, r3, r1
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	00eb      	lsls	r3, r5, #3
 8004bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c02:	00e2      	lsls	r2, r4, #3
 8004c04:	4614      	mov	r4, r2
 8004c06:	461d      	mov	r5, r3
 8004c08:	4643      	mov	r3, r8
 8004c0a:	18e3      	adds	r3, r4, r3
 8004c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c10:	464b      	mov	r3, r9
 8004c12:	eb45 0303 	adc.w	r3, r5, r3
 8004c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c36:	4629      	mov	r1, r5
 8004c38:	008b      	lsls	r3, r1, #2
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c40:	4621      	mov	r1, r4
 8004c42:	008a      	lsls	r2, r1, #2
 8004c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c48:	f7fb fabe 	bl	80001c8 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4b60      	ldr	r3, [pc, #384]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004c52:	fba3 2302 	umull	r2, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	011c      	lsls	r4, r3, #4
 8004c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	1891      	adds	r1, r2, r2
 8004c72:	61b9      	str	r1, [r7, #24]
 8004c74:	415b      	adcs	r3, r3
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	1851      	adds	r1, r2, r1
 8004c80:	6139      	str	r1, [r7, #16]
 8004c82:	4649      	mov	r1, r9
 8004c84:	414b      	adcs	r3, r1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c94:	4659      	mov	r1, fp
 8004c96:	00cb      	lsls	r3, r1, #3
 8004c98:	4651      	mov	r1, sl
 8004c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9e:	4651      	mov	r1, sl
 8004ca0:	00ca      	lsls	r2, r1, #3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4642      	mov	r2, r8
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	eb42 0303 	adc.w	r3, r2, r3
 8004cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	008b      	lsls	r3, r1, #2
 8004cd8:	4641      	mov	r1, r8
 8004cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cde:	4641      	mov	r1, r8
 8004ce0:	008a      	lsls	r2, r1, #2
 8004ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ce6:	f7fb fa6f 	bl	80001c8 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4b39      	ldr	r3, [pc, #228]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0e:	441c      	add	r4, r3
 8004d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d14:	2200      	movs	r2, #0
 8004d16:	673b      	str	r3, [r7, #112]	; 0x70
 8004d18:	677a      	str	r2, [r7, #116]	; 0x74
 8004d1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d1e:	4642      	mov	r2, r8
 8004d20:	464b      	mov	r3, r9
 8004d22:	1891      	adds	r1, r2, r2
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	415b      	adcs	r3, r3
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d2e:	4641      	mov	r1, r8
 8004d30:	1851      	adds	r1, r2, r1
 8004d32:	6039      	str	r1, [r7, #0]
 8004d34:	4649      	mov	r1, r9
 8004d36:	414b      	adcs	r3, r1
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d46:	4659      	mov	r1, fp
 8004d48:	00cb      	lsls	r3, r1, #3
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d50:	4651      	mov	r1, sl
 8004d52:	00ca      	lsls	r2, r1, #3
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4642      	mov	r2, r8
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d60:	464b      	mov	r3, r9
 8004d62:	460a      	mov	r2, r1
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	663b      	str	r3, [r7, #96]	; 0x60
 8004d74:	667a      	str	r2, [r7, #100]	; 0x64
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d82:	4649      	mov	r1, r9
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	4641      	mov	r1, r8
 8004d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	008a      	lsls	r2, r1, #2
 8004d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d94:	f7fb fa18 	bl	80001c8 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2164      	movs	r1, #100	; 0x64
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	3332      	adds	r3, #50	; 0x32
 8004db0:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	f003 020f 	and.w	r2, r3, #15
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4422      	add	r2, r4
 8004dc4:	609a      	str	r2, [r3, #8]
}
 8004dc6:	bf00      	nop
 8004dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	51eb851f 	.word	0x51eb851f

08004dd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd8:	b084      	sub	sp, #16
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	f107 001c 	add.w	r0, r7, #28
 8004de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d122      	bne.n	8004e36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f9c0 	bl	80051b0 <USB_CoreReset>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e01a      	b.n	8004e6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9b4 	bl	80051b0 <USB_CoreReset>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e5e:	e005      	b.n	8004e6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10b      	bne.n	8004e8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f043 0206 	orr.w	r2, r3, #6
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e96:	b004      	add	sp, #16
 8004e98:	4770      	bx	lr

08004e9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d115      	bne.n	8004f2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f7fc f867 	bl	8000fe0 <HAL_Delay>
      ms++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f93a 	bl	8005192 <USB_GetMode>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d01e      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b31      	cmp	r3, #49	; 0x31
 8004f28:	d9f0      	bls.n	8004f0c <USB_SetCurrentMode+0x2e>
 8004f2a:	e01a      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d115      	bne.n	8004f5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f7fc f84e 	bl	8000fe0 <HAL_Delay>
      ms++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f921 	bl	8005192 <USB_GetMode>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b31      	cmp	r3, #49	; 0x31
 8004f5a:	d9f0      	bls.n	8004f3e <USB_SetCurrentMode+0x60>
 8004f5c:	e001      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e005      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b32      	cmp	r3, #50	; 0x32
 8004f66:	d101      	bne.n	8004f6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <USB_FlushTxFifo+0x64>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e01b      	b.n	8004fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	daf2      	bge.n	8004f86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	019b      	lsls	r3, r3, #6
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <USB_FlushTxFifo+0x64>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e006      	b.n	8004fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d0f0      	beq.n	8004fb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	00030d40 	.word	0x00030d40

08004fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a11      	ldr	r2, [pc, #68]	; (800503c <USB_FlushRxFifo+0x5c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e018      	b.n	8005030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	daf2      	bge.n	8004fec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2210      	movs	r2, #16
 800500e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3301      	adds	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a08      	ldr	r2, [pc, #32]	; (800503c <USB_FlushRxFifo+0x5c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e006      	b.n	8005030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b10      	cmp	r3, #16
 800502c:	d0f0      	beq.n	8005010 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	00030d40 	.word	0x00030d40

08005040 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005040:	b480      	push	{r7}
 8005042:	b089      	sub	sp, #36	; 0x24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	4611      	mov	r1, r2
 800504c:	461a      	mov	r2, r3
 800504e:	460b      	mov	r3, r1
 8005050:	71fb      	strb	r3, [r7, #7]
 8005052:	4613      	mov	r3, r2
 8005054:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800505e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005062:	2b00      	cmp	r3, #0
 8005064:	d123      	bne.n	80050ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005066:	88bb      	ldrh	r3, [r7, #4]
 8005068:	3303      	adds	r3, #3
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e018      	b.n	80050a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	031a      	lsls	r2, r3, #12
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005080:	461a      	mov	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	3301      	adds	r3, #1
 800508c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3301      	adds	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	3301      	adds	r3, #1
 8005098:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3301      	adds	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3e2      	bcc.n	8005074 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3724      	adds	r7, #36	; 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050bc:	b480      	push	{r7}
 80050be:	b08b      	sub	sp, #44	; 0x2c
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	089b      	lsrs	r3, r3, #2
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	e014      	b.n	8005112 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	3301      	adds	r3, #1
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	3301      	adds	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	3301      	adds	r3, #1
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	3301      	adds	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	3301      	adds	r3, #1
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	6a3a      	ldr	r2, [r7, #32]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	429a      	cmp	r2, r3
 8005118:	d3e6      	bcc.n	80050e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800511a:	8bfb      	ldrh	r3, [r7, #30]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01e      	beq.n	800515e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512a:	461a      	mov	r2, r3
 800512c:	f107 0310 	add.w	r3, r7, #16
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	701a      	strb	r2, [r3, #0]
      i++;
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	3301      	adds	r3, #1
 800514a:	623b      	str	r3, [r7, #32]
      pDest++;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	3301      	adds	r3, #1
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005152:	8bfb      	ldrh	r3, [r7, #30]
 8005154:	3b01      	subs	r3, #1
 8005156:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005158:	8bfb      	ldrh	r3, [r7, #30]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1ea      	bne.n	8005134 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005160:	4618      	mov	r0, r3
 8005162:	372c      	adds	r7, #44	; 0x2c
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4013      	ands	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3301      	adds	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4a13      	ldr	r2, [pc, #76]	; (8005214 <USB_CoreReset+0x64>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e01b      	b.n	8005206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	daf2      	bge.n	80051bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f043 0201 	orr.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <USB_CoreReset+0x64>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e006      	b.n	8005206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d0f0      	beq.n	80051e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	00030d40 	.word	0x00030d40

08005218 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005218:	b084      	sub	sp, #16
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d018      	beq.n	80052a0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d10a      	bne.n	800528a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005282:	f043 0304 	orr.w	r3, r3, #4
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e014      	b.n	80052b4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005298:	f023 0304 	bic.w	r3, r3, #4
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e009      	b.n	80052b4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ae:	f023 0304 	bic.w	r3, r3, #4
 80052b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052b4:	2110      	movs	r1, #16
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe5e 	bl	8004f78 <USB_FlushTxFifo>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fe8a 	bl	8004fe0 <USB_FlushRxFifo>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e015      	b.n	8005308 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	461a      	mov	r2, r3
 80052fe:	2300      	movs	r3, #0
 8005300:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	3301      	adds	r3, #1
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	429a      	cmp	r2, r3
 800530e:	d3e5      	bcc.n	80052dc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f04f 32ff 	mov.w	r2, #4294967295
 800531c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005330:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a13      	ldr	r2, [pc, #76]	; (8005384 <USB_HostInit+0x16c>)
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a13      	ldr	r2, [pc, #76]	; (8005388 <USB_HostInit+0x170>)
 800533c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005340:	e009      	b.n	8005356 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a10      	ldr	r2, [pc, #64]	; (800538c <USB_HostInit+0x174>)
 800534c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a0f      	ldr	r2, [pc, #60]	; (8005390 <USB_HostInit+0x178>)
 8005352:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f043 0210 	orr.w	r2, r3, #16
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699a      	ldr	r2, [r3, #24]
 800536c:	4b09      	ldr	r3, [pc, #36]	; (8005394 <USB_HostInit+0x17c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005374:	7dfb      	ldrb	r3, [r7, #23]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005380:	b004      	add	sp, #16
 8005382:	4770      	bx	lr
 8005384:	01000200 	.word	0x01000200
 8005388:	00e00300 	.word	0x00e00300
 800538c:	00600080 	.word	0x00600080
 8005390:	004000e0 	.word	0x004000e0
 8005394:	a3200008 	.word	0xa3200008

08005398 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e0:	461a      	mov	r2, r3
 80053e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053e6:	6053      	str	r3, [r2, #4]
 80053e8:	e009      	b.n	80053fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d106      	bne.n	80053fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f6:	461a      	mov	r2, r3
 80053f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80053fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800542c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800543c:	2064      	movs	r0, #100	; 0x64
 800543e:	f7fb fdcf 	bl	8000fe0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800544a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800544e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005450:	200a      	movs	r0, #10
 8005452:	f7fb fdc5 	bl	8000fe0 <HAL_Delay>

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005484:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d109      	bne.n	80054a4 <USB_DriveVbus+0x44>
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d106      	bne.n	80054a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800549e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d109      	bne.n	80054c4 <USB_DriveVbus+0x64>
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	0c5b      	lsrs	r3, r3, #17
 80054f0:	f003 0303 	and.w	r3, r3, #3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	b29b      	uxth	r3, r3
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4603      	mov	r3, r0
 8005534:	70fb      	strb	r3, [r7, #3]
 8005536:	460b      	mov	r3, r1
 8005538:	70bb      	strb	r3, [r7, #2]
 800553a:	4613      	mov	r3, r2
 800553c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4413      	add	r3, r2
 800554e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005552:	461a      	mov	r2, r3
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
 8005558:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800555a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800555e:	2b03      	cmp	r3, #3
 8005560:	d87e      	bhi.n	8005660 <USB_HC_Init+0x13c>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <USB_HC_Init+0x44>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005579 	.word	0x08005579
 800556c:	08005623 	.word	0x08005623
 8005570:	08005579 	.word	0x08005579
 8005574:	080055e5 	.word	0x080055e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	461a      	mov	r2, r3
 8005586:	f240 439d 	movw	r3, #1181	; 0x49d
 800558a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800558c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005590:	2b00      	cmp	r3, #0
 8005592:	da10      	bge.n	80055b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80055b4:	e057      	b.n	8005666 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d051      	beq.n	8005666 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055e0:	60d3      	str	r3, [r2, #12]
      break;
 80055e2:	e040      	b.n	8005666 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	461a      	mov	r2, r3
 80055f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80055f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da34      	bge.n	800566a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	440a      	add	r2, r1
 8005616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005620:	e023      	b.n	800566a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	461a      	mov	r2, r3
 8005630:	f240 2325 	movw	r3, #549	; 0x225
 8005634:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005636:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800563a:	2b00      	cmp	r3, #0
 800563c:	da17      	bge.n	800566e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	440a      	add	r2, r1
 8005654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005658:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800565c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800565e:	e006      	b.n	800566e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	77fb      	strb	r3, [r7, #31]
      break;
 8005664:	e004      	b.n	8005670 <USB_HC_Init+0x14c>
      break;
 8005666:	bf00      	nop
 8005668:	e002      	b.n	8005670 <USB_HC_Init+0x14c>
      break;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <USB_HC_Init+0x14c>
      break;
 800566e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	440a      	add	r2, r1
 8005686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568a:	f043 0302 	orr.w	r3, r3, #2
 800568e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	2101      	movs	r1, #1
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	6939      	ldr	r1, [r7, #16]
 80056a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056aa:	4313      	orrs	r3, r2
 80056ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80056ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da03      	bge.n	80056ca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	e001      	b.n	80056ce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff feff 	bl	80054d2 <USB_GetHostSpeed>
 80056d4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80056d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d106      	bne.n	80056ec <USB_HC_Init+0x1c8>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d003      	beq.n	80056ec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80056e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	e001      	b.n	80056f0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056f0:	787b      	ldrb	r3, [r7, #1]
 80056f2:	059b      	lsls	r3, r3, #22
 80056f4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056f8:	78bb      	ldrb	r3, [r7, #2]
 80056fa:	02db      	lsls	r3, r3, #11
 80056fc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005700:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005702:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005706:	049b      	lsls	r3, r3, #18
 8005708:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800570c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800570e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005710:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005714:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	0159      	lsls	r1, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	440b      	add	r3, r1
 8005722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005726:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800572c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800572e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005732:	2b03      	cmp	r3, #3
 8005734:	d003      	beq.n	800573e <USB_HC_Init+0x21a>
 8005736:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d10f      	bne.n	800575e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	440a      	add	r2, r1
 8005754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800575c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800575e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	; 0x30
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005784:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02d      	beq.n	80057ee <USB_HC_StartXfer+0x86>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d129      	bne.n	80057ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d117      	bne.n	80057d0 <USB_HC_StartXfer+0x68>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	79db      	ldrb	r3, [r3, #7]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <USB_HC_StartXfer+0x48>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	79db      	ldrb	r3, [r3, #7]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d10f      	bne.n	80057d0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <USB_HC_StartXfer+0x86>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	795b      	ldrb	r3, [r3, #5]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d107      	bne.n	80057ee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	4619      	mov	r1, r3
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa0f 	bl	8005c08 <USB_DoPing>
      return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e0f8      	b.n	80059e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d018      	beq.n	8005828 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	8912      	ldrh	r2, [r2, #8]
 80057fe:	4413      	add	r3, r2
 8005800:	3b01      	subs	r3, #1
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	8912      	ldrh	r2, [r2, #8]
 8005806:	fbb3 f3f2 	udiv	r3, r3, r2
 800580a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800580c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800580e:	8b7b      	ldrh	r3, [r7, #26]
 8005810:	429a      	cmp	r2, r3
 8005812:	d90b      	bls.n	800582c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005814:	8b7b      	ldrh	r3, [r7, #26]
 8005816:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	8912      	ldrh	r2, [r2, #8]
 800581e:	fb03 f202 	mul.w	r2, r3, r2
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	e001      	b.n	800582c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005828:	2301      	movs	r3, #1
 800582a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	78db      	ldrb	r3, [r3, #3]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005834:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	8912      	ldrh	r2, [r2, #8]
 800583a:	fb03 f202 	mul.w	r2, r3, r2
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	611a      	str	r2, [r3, #16]
 8005842:	e003      	b.n	800584c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005856:	04d9      	lsls	r1, r3, #19
 8005858:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <USB_HC_StartXfer+0x280>)
 800585a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800585c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	7a9b      	ldrb	r3, [r3, #10]
 8005862:	075b      	lsls	r3, r3, #29
 8005864:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005868:	69f9      	ldr	r1, [r7, #28]
 800586a:	0148      	lsls	r0, r1, #5
 800586c:	6a39      	ldr	r1, [r7, #32]
 800586e:	4401      	add	r1, r0
 8005870:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005874:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005876:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	68d9      	ldr	r1, [r3, #12]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	460a      	mov	r2, r1
 8005890:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	7e7b      	ldrb	r3, [r7, #25]
 80058da:	075b      	lsls	r3, r3, #29
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	0148      	lsls	r0, r1, #5
 80058e0:	6a39      	ldr	r1, [r7, #32]
 80058e2:	4401      	add	r1, r0
 80058e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80058e8:	4313      	orrs	r3, r2
 80058ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005902:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	78db      	ldrb	r3, [r3, #3]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	e003      	b.n	800591e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800591c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005924:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	461a      	mov	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e04e      	b.n	80059e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	78db      	ldrb	r3, [r3, #3]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d149      	bne.n	80059de <USB_HC_StartXfer+0x276>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d045      	beq.n	80059de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	79db      	ldrb	r3, [r3, #7]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d830      	bhi.n	80059bc <USB_HC_StartXfer+0x254>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <USB_HC_StartXfer+0x1f8>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005971 	.word	0x08005971
 8005964:	08005995 	.word	0x08005995
 8005968:	08005971 	.word	0x08005971
 800596c:	08005995 	.word	0x08005995
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	3303      	adds	r3, #3
 8005976:	089b      	lsrs	r3, r3, #2
 8005978:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800597a:	8afa      	ldrh	r2, [r7, #22]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	b29b      	uxth	r3, r3
 8005982:	429a      	cmp	r2, r3
 8005984:	d91c      	bls.n	80059c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	619a      	str	r2, [r3, #24]
        }
        break;
 8005992:	e015      	b.n	80059c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	3303      	adds	r3, #3
 800599a:	089b      	lsrs	r3, r3, #2
 800599c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800599e:	8afa      	ldrh	r2, [r7, #22]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d90a      	bls.n	80059c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80059ba:	e003      	b.n	80059c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80059bc:	bf00      	nop
 80059be:	e002      	b.n	80059c6 <USB_HC_StartXfer+0x25e>
        break;
 80059c0:	bf00      	nop
 80059c2:	e000      	b.n	80059c6 <USB_HC_StartXfer+0x25e>
        break;
 80059c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68d9      	ldr	r1, [r3, #12]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	785a      	ldrb	r2, [r3, #1]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2000      	movs	r0, #0
 80059d6:	9000      	str	r0, [sp, #0]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff fb31 	bl	8005040 <USB_WritePacket>
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3728      	adds	r7, #40	; 0x28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	1ff80000 	.word	0x1ff80000

080059ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	b29b      	uxth	r3, r3
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b089      	sub	sp, #36	; 0x24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	0c9b      	lsrs	r3, r3, #18
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	0fdb      	lsrs	r3, r3, #31
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d104      	bne.n	8005a68 <USB_HC_Halt+0x5a>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e0c8      	b.n	8005bfa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <USB_HC_Halt+0x66>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d163      	bne.n	8005b3c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a92:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f040 80ab 	bne.w	8005bf8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d133      	bne.n	8005b16 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3301      	adds	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005afa:	d81d      	bhi.n	8005b38 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b12:	d0ec      	beq.n	8005aee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b14:	e070      	b.n	8005bf8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b34:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b36:	e05f      	b.n	8005bf8 <USB_HC_Halt+0x1ea>
            break;
 8005b38:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b3a:	e05d      	b.n	8005bf8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d133      	bne.n	8005bd4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb8:	d81d      	bhi.n	8005bf6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd0:	d0ec      	beq.n	8005bac <USB_HC_Halt+0x19e>
 8005bd2:	e011      	b.n	8005bf8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e000      	b.n	8005bf8 <USB_HC_Halt+0x1ea>
          break;
 8005bf6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	04da      	lsls	r2, r3, #19
 8005c24:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <USB_DoPing+0x74>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	1ff80000 	.word	0x1ff80000

08005c80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff f911 	bl	8004ebc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c9a:	2110      	movs	r1, #16
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff f96b 	bl	8004f78 <USB_FlushTxFifo>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff f997 	bl	8004fe0 <USB_FlushRxFifo>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e01f      	b.n	8005d02 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ce0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ce8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b0f      	cmp	r3, #15
 8005d06:	d9dc      	bls.n	8005cc2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	e034      	b.n	8005d78 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d42:	461a      	mov	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d54:	d80c      	bhi.n	8005d70 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6c:	d0ec      	beq.n	8005d48 <USB_StopHost+0xc8>
 8005d6e:	e000      	b.n	8005d72 <USB_StopHost+0xf2>
        break;
 8005d70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	3301      	adds	r3, #1
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d9c7      	bls.n	8005d0e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d84:	461a      	mov	r2, r3
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff f880 	bl	8004e9a <USB_EnableGlobalInt>

  return ret;
 8005d9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b089      	sub	sp, #36	; 0x24
 8005da8:	af04      	add	r7, sp, #16
 8005daa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005dac:	2301      	movs	r3, #1
 8005dae:	2202      	movs	r2, #2
 8005db0:	2102      	movs	r1, #2
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fc66 	bl	8006684 <USBH_FindInterface>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	2bff      	cmp	r3, #255	; 0xff
 8005dc0:	d002      	beq.n	8005dc8 <USBH_CDC_InterfaceInit+0x24>
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d901      	bls.n	8005dcc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e13d      	b.n	8006048 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fc3b 	bl	800664c <USBH_SelectInterface>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005de0:	2302      	movs	r3, #2
 8005de2:	e131      	b.n	8006048 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005dea:	2050      	movs	r0, #80	; 0x50
 8005dec:	f002 fafa 	bl	80083e4 <malloc>
 8005df0:	4603      	mov	r3, r0
 8005df2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e04:	2302      	movs	r3, #2
 8005e06:	e11f      	b.n	8006048 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e08:	2250      	movs	r2, #80	; 0x50
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	68b8      	ldr	r0, [r7, #8]
 8005e0e:	f002 faf9 	bl	8008404 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	211a      	movs	r1, #26
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b25b      	sxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da15      	bge.n	8005e56 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	211a      	movs	r1, #26
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	4413      	add	r3, r2
 8005e36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	211a      	movs	r1, #26
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e50:	881a      	ldrh	r2, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 ff2c 	bl	8007cba <USBH_AllocPipe>
 8005e62:	4603      	mov	r3, r0
 8005e64:	461a      	mov	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	7819      	ldrb	r1, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	7858      	ldrb	r0, [r3, #1]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	8952      	ldrh	r2, [r2, #10]
 8005e82:	9202      	str	r2, [sp, #8]
 8005e84:	2203      	movs	r2, #3
 8005e86:	9201      	str	r2, [sp, #4]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 fee4 	bl	8007c5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f002 f9f3 	bl	8008288 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	210a      	movs	r1, #10
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fbeb 	bl	8006684 <USBH_FindInterface>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2bff      	cmp	r3, #255	; 0xff
 8005eb6:	d002      	beq.n	8005ebe <USBH_CDC_InterfaceInit+0x11a>
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d901      	bls.n	8005ec2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e0c2      	b.n	8006048 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	211a      	movs	r1, #26
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da16      	bge.n	8005f08 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	211a      	movs	r1, #26
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	211a      	movs	r1, #26
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	835a      	strh	r2, [r3, #26]
 8005f06:	e015      	b.n	8005f34 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	211a      	movs	r1, #26
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	211a      	movs	r1, #26
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	211a      	movs	r1, #26
 8005f3a:	fb01 f303 	mul.w	r3, r1, r3
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b25b      	sxtb	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	da16      	bge.n	8005f7a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	211a      	movs	r1, #26
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f5c:	781a      	ldrb	r2, [r3, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	211a      	movs	r1, #26
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	835a      	strh	r2, [r3, #26]
 8005f78:	e015      	b.n	8005fa6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	211a      	movs	r1, #26
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f8a:	781a      	ldrb	r2, [r3, #0]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	211a      	movs	r1, #26
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	7b9b      	ldrb	r3, [r3, #14]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 fe84 	bl	8007cba <USBH_AllocPipe>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	7bdb      	ldrb	r3, [r3, #15]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 fe7a 	bl	8007cba <USBH_AllocPipe>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	7b59      	ldrb	r1, [r3, #13]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	7b98      	ldrb	r0, [r3, #14]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	8b12      	ldrh	r2, [r2, #24]
 8005fe6:	9202      	str	r2, [sp, #8]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	9201      	str	r2, [sp, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	4623      	mov	r3, r4
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fe32 	bl	8007c5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	7b19      	ldrb	r1, [r3, #12]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	7bd8      	ldrb	r0, [r3, #15]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	8b52      	ldrh	r2, [r2, #26]
 8006010:	9202      	str	r2, [sp, #8]
 8006012:	2202      	movs	r2, #2
 8006014:	9201      	str	r2, [sp, #4]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4623      	mov	r3, r4
 800601a:	4602      	mov	r2, r0
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fe1d 	bl	8007c5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	7b5b      	ldrb	r3, [r3, #13]
 800602e:	2200      	movs	r2, #0
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f002 f928 	bl	8008288 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	7b1b      	ldrb	r3, [r3, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f002 f921 	bl	8008288 <USBH_LL_SetToggle>

  return USBH_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	bd90      	pop	{r4, r7, pc}

08006050 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00e      	beq.n	8006088 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fe12 	bl	8007c9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 fe3d 	bl	8007cfc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	7b1b      	ldrb	r3, [r3, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00e      	beq.n	80060ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	7b1b      	ldrb	r3, [r3, #12]
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fdff 	bl	8007c9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	7b1b      	ldrb	r3, [r3, #12]
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fe2a 	bl	8007cfc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	7b5b      	ldrb	r3, [r3, #13]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00e      	beq.n	80060d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7b5b      	ldrb	r3, [r3, #13]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fdec 	bl	8007c9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	7b5b      	ldrb	r3, [r3, #13]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 fe17 	bl	8007cfc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00b      	beq.n	80060f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 f983 	bl	80083f4 <free>
    phost->pActiveClass->pData = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f4:	2200      	movs	r2, #0
 80060f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3340      	adds	r3, #64	; 0x40
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8b1 	bl	8006282 <GetLineCoding>
 8006120:	4603      	mov	r3, r0
 8006122:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006124:	7afb      	ldrb	r3, [r7, #11]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006130:	2102      	movs	r1, #2
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006136:	7afb      	ldrb	r3, [r7, #11]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006148:	2301      	movs	r3, #1
 800614a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006160:	2b04      	cmp	r3, #4
 8006162:	d877      	bhi.n	8006254 <USBH_CDC_Process+0x114>
 8006164:	a201      	add	r2, pc, #4	; (adr r2, 800616c <USBH_CDC_Process+0x2c>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	08006181 	.word	0x08006181
 8006170:	08006187 	.word	0x08006187
 8006174:	080061b7 	.word	0x080061b7
 8006178:	0800622b 	.word	0x0800622b
 800617c:	08006239 	.word	0x08006239
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]
      break;
 8006184:	e06d      	b.n	8006262 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f897 	bl	80062c0 <SetLineCoding>
 8006192:	4603      	mov	r3, r0
 8006194:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061a4:	e058      	b.n	8006258 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d055      	beq.n	8006258 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2204      	movs	r2, #4
 80061b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061b4:	e050      	b.n	8006258 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3340      	adds	r3, #64	; 0x40
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f860 	bl	8006282 <GetLineCoding>
 80061c2:	4603      	mov	r3, r0
 80061c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d126      	bne.n	800621a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061de:	791b      	ldrb	r3, [r3, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d13b      	bne.n	800625c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d133      	bne.n	800625c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006200:	429a      	cmp	r2, r3
 8006202:	d12b      	bne.n	800625c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800620e:	429a      	cmp	r2, r3
 8006210:	d124      	bne.n	800625c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f958 	bl	80064c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006218:	e020      	b.n	800625c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d01d      	beq.n	800625c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2204      	movs	r2, #4
 8006224:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006228:	e018      	b.n	800625c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f867 	bl	80062fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f8da 	bl	80063ea <CDC_ProcessReception>
      break;
 8006236:	e014      	b.n	8006262 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006238:	2100      	movs	r1, #0
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 ffef 	bl	800721e <USBH_ClrFeature>
 8006240:	4603      	mov	r3, r0
 8006242:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006252:	e005      	b.n	8006260 <USBH_CDC_Process+0x120>

    default:
      break;
 8006254:	bf00      	nop
 8006256:	e004      	b.n	8006262 <USBH_CDC_Process+0x122>
      break;
 8006258:	bf00      	nop
 800625a:	e002      	b.n	8006262 <USBH_CDC_Process+0x122>
      break;
 800625c:	bf00      	nop
 800625e:	e000      	b.n	8006262 <USBH_CDC_Process+0x122>
      break;
 8006260:	bf00      	nop

  }

  return status;
 8006262:	7bfb      	ldrb	r3, [r7, #15]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	22a1      	movs	r2, #161	; 0xa1
 8006290:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2221      	movs	r2, #33	; 0x21
 8006296:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2207      	movs	r2, #7
 80062a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2207      	movs	r2, #7
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fa81 	bl	80077b8 <USBH_CtlReq>
 80062b6:	4603      	mov	r3, r0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2221      	movs	r2, #33	; 0x21
 80062ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2207      	movs	r2, #7
 80062e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2207      	movs	r2, #7
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 fa62 	bl	80077b8 <USBH_CtlReq>
 80062f4:	4603      	mov	r3, r0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af02      	add	r7, sp, #8
 8006304:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006310:	2300      	movs	r3, #0
 8006312:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800631a:	2b01      	cmp	r3, #1
 800631c:	d002      	beq.n	8006324 <CDC_ProcessTransmission+0x26>
 800631e:	2b02      	cmp	r3, #2
 8006320:	d023      	beq.n	800636a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006322:	e05e      	b.n	80063e2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	8b12      	ldrh	r2, [r2, #24]
 800632c:	4293      	cmp	r3, r2
 800632e:	d90b      	bls.n	8006348 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8b1a      	ldrh	r2, [r3, #24]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	7b5b      	ldrb	r3, [r3, #13]
 800633c:	2001      	movs	r0, #1
 800633e:	9000      	str	r0, [sp, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fc48 	bl	8007bd6 <USBH_BulkSendData>
 8006346:	e00b      	b.n	8006360 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	7b5b      	ldrb	r3, [r3, #13]
 8006356:	2001      	movs	r0, #1
 8006358:	9000      	str	r0, [sp, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fc3b 	bl	8007bd6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006368:	e03b      	b.n	80063e2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	7b5b      	ldrb	r3, [r3, #13]
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 ff5f 	bl	8008234 <USBH_LL_GetURBState>
 8006376:	4603      	mov	r3, r0
 8006378:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d128      	bne.n	80063d2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	8b12      	ldrh	r2, [r2, #24]
 8006388:	4293      	cmp	r3, r2
 800638a:	d90e      	bls.n	80063aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	8b12      	ldrh	r2, [r2, #24]
 8006394:	1a9a      	subs	r2, r3, r2
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	8b12      	ldrh	r2, [r2, #24]
 80063a2:	441a      	add	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	61da      	str	r2, [r3, #28]
 80063a8:	e002      	b.n	80063b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063c0:	e00e      	b.n	80063e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f868 	bl	80064a0 <USBH_CDC_TransmitCallback>
      break;
 80063d0:	e006      	b.n	80063e0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80063d2:	7afb      	ldrb	r3, [r7, #11]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d103      	bne.n	80063e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063e0:	bf00      	nop
  }
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b086      	sub	sp, #24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006406:	2b03      	cmp	r3, #3
 8006408:	d002      	beq.n	8006410 <CDC_ProcessReception+0x26>
 800640a:	2b04      	cmp	r3, #4
 800640c:	d00e      	beq.n	800642c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800640e:	e043      	b.n	8006498 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	6a19      	ldr	r1, [r3, #32]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	8b5a      	ldrh	r2, [r3, #26]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	7b1b      	ldrb	r3, [r3, #12]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fbff 	bl	8007c20 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2204      	movs	r2, #4
 8006426:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800642a:	e035      	b.n	8006498 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	7b1b      	ldrb	r3, [r3, #12]
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fefe 	bl	8008234 <USBH_LL_GetURBState>
 8006438:	4603      	mov	r3, r0
 800643a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800643c:	7cfb      	ldrb	r3, [r7, #19]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d129      	bne.n	8006496 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	7b1b      	ldrb	r3, [r3, #12]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fe61 	bl	8008110 <USBH_LL_GetLastXferSize>
 800644e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	429a      	cmp	r2, r3
 8006458:	d016      	beq.n	8006488 <CDC_ProcessReception+0x9e>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	8b5b      	ldrh	r3, [r3, #26]
 800645e:	461a      	mov	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4293      	cmp	r3, r2
 8006464:	d910      	bls.n	8006488 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	1ad2      	subs	r2, r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	441a      	add	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2203      	movs	r2, #3
 8006482:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006486:	e006      	b.n	8006496 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f80f 	bl	80064b4 <USBH_CDC_ReceiveCallback>
      break;
 8006496:	bf00      	nop
  }
}
 8006498:	bf00      	nop
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	e029      	b.n	8006548 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	79fa      	ldrb	r2, [r7, #7]
 80064f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f81f 	bl	8006550 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f001 fd31 	bl	8007fa8 <USBH_LL_Init>

  return USBH_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e009      	b.n	8006576 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	33e0      	adds	r3, #224	; 0xe0
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	2200      	movs	r2, #0
 800656e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b0f      	cmp	r3, #15
 800657a:	d9f2      	bls.n	8006562 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e009      	b.n	8006596 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659c:	d3f1      	bcc.n	8006582 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2240      	movs	r2, #64	; 0x40
 80065c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10e      	bne.n	8006634 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800661c:	1c59      	adds	r1, r3, #1
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	33de      	adds	r3, #222	; 0xde
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
 8006632:	e004      	b.n	800663e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006634:	2302      	movs	r3, #2
 8006636:	73fb      	strb	r3, [r7, #15]
 8006638:	e001      	b.n	800663e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800663a:	2302      	movs	r3, #2
 800663c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	429a      	cmp	r2, r3
 8006666:	d204      	bcs.n	8006672 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006670:	e001      	b.n	8006676 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006672:	2302      	movs	r3, #2
 8006674:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	461a      	mov	r2, r3
 8006692:	4603      	mov	r3, r0
 8006694:	70fb      	strb	r3, [r7, #3]
 8006696:	460b      	mov	r3, r1
 8006698:	70bb      	strb	r3, [r7, #2]
 800669a:	4613      	mov	r3, r2
 800669c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066ae:	e025      	b.n	80066fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	221a      	movs	r2, #26
 80066b4:	fb02 f303 	mul.w	r3, r2, r3
 80066b8:	3308      	adds	r3, #8
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	3302      	adds	r3, #2
 80066c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	795b      	ldrb	r3, [r3, #5]
 80066c6:	78fa      	ldrb	r2, [r7, #3]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d002      	beq.n	80066d2 <USBH_FindInterface+0x4e>
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2bff      	cmp	r3, #255	; 0xff
 80066d0:	d111      	bne.n	80066f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066d6:	78ba      	ldrb	r2, [r7, #2]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d002      	beq.n	80066e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066dc:	78bb      	ldrb	r3, [r7, #2]
 80066de:	2bff      	cmp	r3, #255	; 0xff
 80066e0:	d109      	bne.n	80066f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066e6:	787a      	ldrb	r2, [r7, #1]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d002      	beq.n	80066f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066ec:	787b      	ldrb	r3, [r7, #1]
 80066ee:	2bff      	cmp	r3, #255	; 0xff
 80066f0:	d101      	bne.n	80066f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	e006      	b.n	8006704 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	3301      	adds	r3, #1
 80066fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d9d6      	bls.n	80066b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006702:	23ff      	movs	r3, #255	; 0xff
}
 8006704:	4618      	mov	r0, r3
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fc81 	bl	8008020 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800671e:	2101      	movs	r1, #1
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 fd9a 	bl	800825a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af04      	add	r7, sp, #16
 8006736:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006738:	2302      	movs	r3, #2
 800673a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2203      	movs	r2, #3
 8006750:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b0b      	cmp	r3, #11
 800675a:	f200 81be 	bhi.w	8006ada <USBH_Process+0x3aa>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <USBH_Process+0x34>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	08006795 	.word	0x08006795
 8006768:	080067c7 	.word	0x080067c7
 800676c:	0800682f 	.word	0x0800682f
 8006770:	08006a75 	.word	0x08006a75
 8006774:	08006adb 	.word	0x08006adb
 8006778:	080068d3 	.word	0x080068d3
 800677c:	08006a1b 	.word	0x08006a1b
 8006780:	08006909 	.word	0x08006909
 8006784:	08006929 	.word	0x08006929
 8006788:	08006949 	.word	0x08006949
 800678c:	0800698d 	.word	0x0800698d
 8006790:	08006a5d 	.word	0x08006a5d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 819e 	beq.w	8006ade <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067a8:	20c8      	movs	r0, #200	; 0xc8
 80067aa:	f001 fd9d 	bl	80082e8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fc93 	bl	80080da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067c4:	e18b      	b.n	8006ade <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d107      	bne.n	80067e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067de:	e18d      	b.n	8006afc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ea:	d914      	bls.n	8006816 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006802:	2b03      	cmp	r3, #3
 8006804:	d903      	bls.n	800680e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	220d      	movs	r2, #13
 800680a:	701a      	strb	r2, [r3, #0]
      break;
 800680c:	e176      	b.n	8006afc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
      break;
 8006814:	e172      	b.n	8006afc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800681c:	f103 020a 	add.w	r2, r3, #10
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006826:	200a      	movs	r0, #10
 8006828:	f001 fd5e 	bl	80082e8 <USBH_Delay>
      break;
 800682c:	e166      	b.n	8006afc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800683e:	2104      	movs	r1, #4
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006844:	2064      	movs	r0, #100	; 0x64
 8006846:	f001 fd4f 	bl	80082e8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fc1e 	bl	800808c <USBH_LL_GetSpeed>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2205      	movs	r2, #5
 800685e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006860:	2100      	movs	r1, #0
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fa29 	bl	8007cba <USBH_AllocPipe>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fa21 	bl	8007cba <USBH_AllocPipe>
 8006878:	4603      	mov	r3, r0
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7919      	ldrb	r1, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006894:	b292      	uxth	r2, r2
 8006896:	9202      	str	r2, [sp, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	9201      	str	r2, [sp, #4]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4603      	mov	r3, r0
 80068a0:	2280      	movs	r2, #128	; 0x80
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f9da 	bl	8007c5c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7959      	ldrb	r1, [r3, #5]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068bc:	b292      	uxth	r2, r2
 80068be:	9202      	str	r2, [sp, #8]
 80068c0:	2200      	movs	r2, #0
 80068c2:	9201      	str	r2, [sp, #4]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4603      	mov	r3, r0
 80068c8:	2200      	movs	r2, #0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f9c6 	bl	8007c5c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068d0:	e114      	b.n	8006afc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f918 	bl	8006b08 <USBH_HandleEnum>
 80068d8:	4603      	mov	r3, r0
 80068da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 80fe 	bne.w	8006ae2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d103      	bne.n	8006900 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2208      	movs	r2, #8
 80068fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068fe:	e0f0      	b.n	8006ae2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2207      	movs	r2, #7
 8006904:	701a      	strb	r2, [r3, #0]
      break;
 8006906:	e0ec      	b.n	8006ae2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80e9 	beq.w	8006ae6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800691a:	2101      	movs	r1, #1
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2208      	movs	r2, #8
 8006924:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006926:	e0de      	b.n	8006ae6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800692e:	b29b      	uxth	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fc2c 	bl	8007190 <USBH_SetCfg>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 80d5 	bne.w	8006aea <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2209      	movs	r2, #9
 8006944:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006946:	e0d0      	b.n	8006aea <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006956:	2101      	movs	r1, #1
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fc3c 	bl	80071d6 <USBH_SetFeature>
 800695e:	4603      	mov	r3, r0
 8006960:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	220a      	movs	r2, #10
 800696e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006970:	e0bd      	b.n	8006aee <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b03      	cmp	r3, #3
 8006978:	f040 80b9 	bne.w	8006aee <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	220a      	movs	r2, #10
 8006980:	701a      	strb	r2, [r3, #0]
      break;
 8006982:	e0b4      	b.n	8006aee <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	220a      	movs	r2, #10
 8006988:	701a      	strb	r2, [r3, #0]
      break;
 800698a:	e0b0      	b.n	8006aee <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80ad 	beq.w	8006af2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	e016      	b.n	80069d4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80069a6:	7bfa      	ldrb	r2, [r7, #15]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	32de      	adds	r2, #222	; 0xde
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	791a      	ldrb	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d108      	bne.n	80069ce <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80069bc:	7bfa      	ldrb	r2, [r7, #15]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	32de      	adds	r2, #222	; 0xde
 80069c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069cc:	e005      	b.n	80069da <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	3301      	adds	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0e5      	beq.n	80069a6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d016      	beq.n	8006a12 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2206      	movs	r2, #6
 80069fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a02:	2103      	movs	r1, #3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a08:	e073      	b.n	8006af2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	220d      	movs	r2, #13
 8006a0e:	701a      	strb	r2, [r3, #0]
      break;
 8006a10:	e06f      	b.n	8006af2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	220d      	movs	r2, #13
 8006a16:	701a      	strb	r2, [r3, #0]
      break;
 8006a18:	e06b      	b.n	8006af2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
 8006a30:	4603      	mov	r3, r0
 8006a32:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d103      	bne.n	8006a44 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	220b      	movs	r2, #11
 8006a40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a42:	e058      	b.n	8006af6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d154      	bne.n	8006af6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	220d      	movs	r2, #13
 8006a50:	701a      	strb	r2, [r3, #0]
      break;
 8006a52:	e050      	b.n	8006af6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	220d      	movs	r2, #13
 8006a58:	701a      	strb	r2, [r3, #0]
      break;
 8006a5a:	e04c      	b.n	8006af6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d049      	beq.n	8006afa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
      }
      break;
 8006a72:	e042      	b.n	8006afa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fd67 	bl	8006550 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ab0:	2105      	movs	r1, #5
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d107      	bne.n	8006ad2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fe20 	bl	8006710 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ad0:	e014      	b.n	8006afc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 faa4 	bl	8008020 <USBH_LL_Start>
      break;
 8006ad8:	e010      	b.n	8006afc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ada:	bf00      	nop
 8006adc:	e00e      	b.n	8006afc <USBH_Process+0x3cc>
      break;
 8006ade:	bf00      	nop
 8006ae0:	e00c      	b.n	8006afc <USBH_Process+0x3cc>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e00a      	b.n	8006afc <USBH_Process+0x3cc>
    break;
 8006ae6:	bf00      	nop
 8006ae8:	e008      	b.n	8006afc <USBH_Process+0x3cc>
      break;
 8006aea:	bf00      	nop
 8006aec:	e006      	b.n	8006afc <USBH_Process+0x3cc>
      break;
 8006aee:	bf00      	nop
 8006af0:	e004      	b.n	8006afc <USBH_Process+0x3cc>
      break;
 8006af2:	bf00      	nop
 8006af4:	e002      	b.n	8006afc <USBH_Process+0x3cc>
      break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <USBH_Process+0x3cc>
      break;
 8006afa:	bf00      	nop
  }
  return USBH_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop

08006b08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af04      	add	r7, sp, #16
 8006b0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b07      	cmp	r3, #7
 8006b1e:	f200 81c1 	bhi.w	8006ea4 <USBH_HandleEnum+0x39c>
 8006b22:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <USBH_HandleEnum+0x20>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b49 	.word	0x08006b49
 8006b2c:	08006c07 	.word	0x08006c07
 8006b30:	08006c71 	.word	0x08006c71
 8006b34:	08006cff 	.word	0x08006cff
 8006b38:	08006d69 	.word	0x08006d69
 8006b3c:	08006dd9 	.word	0x08006dd9
 8006b40:	08006e1f 	.word	0x08006e1f
 8006b44:	08006e65 	.word	0x08006e65
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b48:	2108      	movs	r1, #8
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa50 	bl	8006ff0 <USBH_Get_DevDesc>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d130      	bne.n	8006bbc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7919      	ldrb	r1, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b7e:	b292      	uxth	r2, r2
 8006b80:	9202      	str	r2, [sp, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	9201      	str	r2, [sp, #4]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2280      	movs	r2, #128	; 0x80
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f865 	bl	8007c5c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7959      	ldrb	r1, [r3, #5]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ba6:	b292      	uxth	r2, r2
 8006ba8:	9202      	str	r2, [sp, #8]
 8006baa:	2200      	movs	r2, #0
 8006bac:	9201      	str	r2, [sp, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f851 	bl	8007c5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bba:	e175      	b.n	8006ea8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	f040 8172 	bne.w	8006ea8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bca:	3301      	adds	r3, #1
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d903      	bls.n	8006be6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	220d      	movs	r2, #13
 8006be2:	701a      	strb	r2, [r3, #0]
      break;
 8006be4:	e160      	b.n	8006ea8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	795b      	ldrb	r3, [r3, #5]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f885 	bl	8007cfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f87f 	bl	8007cfc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
      break;
 8006c04:	e150      	b.n	8006ea8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c06:	2112      	movs	r1, #18
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f9f1 	bl	8006ff0 <USBH_Get_DevDesc>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c1e:	e145      	b.n	8006eac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	f040 8142 	bne.w	8006eac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c2e:	3301      	adds	r3, #1
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d903      	bls.n	8006c4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	220d      	movs	r2, #13
 8006c46:	701a      	strb	r2, [r3, #0]
      break;
 8006c48:	e130      	b.n	8006eac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	795b      	ldrb	r3, [r3, #5]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f853 	bl	8007cfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	791b      	ldrb	r3, [r3, #4]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 f84d 	bl	8007cfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
      break;
 8006c6e:	e11d      	b.n	8006eac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c70:	2101      	movs	r1, #1
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa68 	bl	8007148 <USBH_SetAddress>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d132      	bne.n	8006ce8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c82:	2002      	movs	r0, #2
 8006c84:	f001 fb30 	bl	80082e8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2203      	movs	r2, #3
 8006c94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	7919      	ldrb	r1, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006caa:	b292      	uxth	r2, r2
 8006cac:	9202      	str	r2, [sp, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	9201      	str	r2, [sp, #4]
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 ffcf 	bl	8007c5c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	7959      	ldrb	r1, [r3, #5]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cd2:	b292      	uxth	r2, r2
 8006cd4:	9202      	str	r2, [sp, #8]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	9201      	str	r2, [sp, #4]
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 ffbb 	bl	8007c5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ce6:	e0e3      	b.n	8006eb0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	f040 80e0 	bne.w	8006eb0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	220d      	movs	r2, #13
 8006cf4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	705a      	strb	r2, [r3, #1]
      break;
 8006cfc:	e0d8      	b.n	8006eb0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006cfe:	2109      	movs	r1, #9
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f99d 	bl	8007040 <USBH_Get_CfgDesc>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2204      	movs	r2, #4
 8006d14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d16:	e0cd      	b.n	8006eb4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	f040 80ca 	bne.w	8006eb4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d26:	3301      	adds	r3, #1
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d903      	bls.n	8006d42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220d      	movs	r2, #13
 8006d3e:	701a      	strb	r2, [r3, #0]
      break;
 8006d40:	e0b8      	b.n	8006eb4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	795b      	ldrb	r3, [r3, #5]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 ffd7 	bl	8007cfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	791b      	ldrb	r3, [r3, #4]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 ffd1 	bl	8007cfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
      break;
 8006d66:	e0a5      	b.n	8006eb4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f965 	bl	8007040 <USBH_Get_CfgDesc>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2205      	movs	r2, #5
 8006d84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d86:	e097      	b.n	8006eb8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	f040 8094 	bne.w	8006eb8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d96:	3301      	adds	r3, #1
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d903      	bls.n	8006db2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	220d      	movs	r2, #13
 8006dae:	701a      	strb	r2, [r3, #0]
      break;
 8006db0:	e082      	b.n	8006eb8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	795b      	ldrb	r3, [r3, #5]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 ff9f 	bl	8007cfc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	791b      	ldrb	r3, [r3, #4]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 ff99 	bl	8007cfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
      break;
 8006dd6:	e06f      	b.n	8006eb8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d019      	beq.n	8006e16 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dee:	23ff      	movs	r3, #255	; 0xff
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f949 	bl	8007088 <USBH_Get_StringDesc>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2206      	movs	r2, #6
 8006e04:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e06:	e059      	b.n	8006ebc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d156      	bne.n	8006ebc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2206      	movs	r2, #6
 8006e12:	705a      	strb	r2, [r3, #1]
      break;
 8006e14:	e052      	b.n	8006ebc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2206      	movs	r2, #6
 8006e1a:	705a      	strb	r2, [r3, #1]
      break;
 8006e1c:	e04e      	b.n	8006ebc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d019      	beq.n	8006e5c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e34:	23ff      	movs	r3, #255	; 0xff
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f926 	bl	8007088 <USBH_Get_StringDesc>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2207      	movs	r2, #7
 8006e4a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e4c:	e038      	b.n	8006ec0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d135      	bne.n	8006ec0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2207      	movs	r2, #7
 8006e58:	705a      	strb	r2, [r3, #1]
      break;
 8006e5a:	e031      	b.n	8006ec0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2207      	movs	r2, #7
 8006e60:	705a      	strb	r2, [r3, #1]
      break;
 8006e62:	e02d      	b.n	8006ec0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e7a:	23ff      	movs	r3, #255	; 0xff
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f903 	bl	8007088 <USBH_Get_StringDesc>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006e90:	e018      	b.n	8006ec4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d115      	bne.n	8006ec4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9c:	e012      	b.n	8006ec4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea2:	e00f      	b.n	8006ec4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ea4:	bf00      	nop
 8006ea6:	e00e      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006ea8:	bf00      	nop
 8006eaa:	e00c      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006eac:	bf00      	nop
 8006eae:	e00a      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006eb0:	bf00      	nop
 8006eb2:	e008      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e006      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e004      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e002      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <USBH_HandleEnum+0x3be>
      break;
 8006ec4:	bf00      	nop
  }
  return Status;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f804 	bl	8006f12 <USBH_HandleSof>
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b0b      	cmp	r3, #11
 8006f22:	d10a      	bne.n	8006f3a <USBH_HandleSof+0x28>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f52:	bf00      	nop
}
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f6e:	bf00      	nop
}
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f844 	bl	8008056 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	791b      	ldrb	r3, [r3, #4]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fe91 	bl	8007cfc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	795b      	ldrb	r3, [r3, #5]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fe8b 	bl	8007cfc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	b29b      	uxth	r3, r3
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800700e:	2100      	movs	r1, #0
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f864 	bl	80070de <USBH_GetDescriptor>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800702c:	78fa      	ldrb	r2, [r7, #3]
 800702e:	b292      	uxth	r2, r2
 8007030:	4619      	mov	r1, r3
 8007032:	f000 f918 	bl	8007266 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af02      	add	r7, sp, #8
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	331c      	adds	r3, #28
 8007050:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007052:	887b      	ldrh	r3, [r7, #2]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705c:	2100      	movs	r1, #0
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f83d 	bl	80070de <USBH_GetDescriptor>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d107      	bne.n	800707e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800706e:	887b      	ldrh	r3, [r7, #2]
 8007070:	461a      	mov	r2, r3
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f987 	bl	8007388 <USBH_ParseCfgDesc>
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	607a      	str	r2, [r7, #4]
 8007092:	461a      	mov	r2, r3
 8007094:	460b      	mov	r3, r1
 8007096:	72fb      	strb	r3, [r7, #11]
 8007098:	4613      	mov	r3, r2
 800709a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070a4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80070ac:	893b      	ldrh	r3, [r7, #8]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	460b      	mov	r3, r1
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f812 	bl	80070de <USBH_GetDescriptor>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d107      	bne.n	80070d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070ca:	893a      	ldrh	r2, [r7, #8]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fb24 	bl	800771c <USBH_ParseStringDesc>
  }

  return status;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	607b      	str	r3, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	72fb      	strb	r3, [r7, #11]
 80070ec:	4613      	mov	r3, r2
 80070ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	789b      	ldrb	r3, [r3, #2]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d11c      	bne.n	8007132 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2206      	movs	r2, #6
 8007108:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	893a      	ldrh	r2, [r7, #8]
 800710e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007110:	893b      	ldrh	r3, [r7, #8]
 8007112:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711a:	d104      	bne.n	8007126 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f240 4209 	movw	r2, #1033	; 0x409
 8007122:	829a      	strh	r2, [r3, #20]
 8007124:	e002      	b.n	800712c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8b3a      	ldrh	r2, [r7, #24]
 8007130:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007132:	8b3b      	ldrh	r3, [r7, #24]
 8007134:	461a      	mov	r2, r3
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fb3d 	bl	80077b8 <USBH_CtlReq>
 800713e:	4603      	mov	r3, r0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	789b      	ldrb	r3, [r3, #2]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10f      	bne.n	800717c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2205      	movs	r2, #5
 8007166:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	b29a      	uxth	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800717c:	2200      	movs	r2, #0
 800717e:	2100      	movs	r1, #0
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fb19 	bl	80077b8 <USBH_CtlReq>
 8007186:	4603      	mov	r3, r0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	789b      	ldrb	r3, [r3, #2]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d10e      	bne.n	80071c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2209      	movs	r2, #9
 80071ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	887a      	ldrh	r2, [r7, #2]
 80071b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071c2:	2200      	movs	r2, #0
 80071c4:	2100      	movs	r1, #0
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 faf6 	bl	80077b8 <USBH_CtlReq>
 80071cc:	4603      	mov	r3, r0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	789b      	ldrb	r3, [r3, #2]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d10f      	bne.n	800720a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2203      	movs	r2, #3
 80071f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fad2 	bl	80077b8 <USBH_CtlReq>
 8007214:	4603      	mov	r3, r0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	460b      	mov	r3, r1
 8007228:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	789b      	ldrb	r3, [r3, #2]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10f      	bne.n	8007252 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007252:	2200      	movs	r2, #0
 8007254:	2100      	movs	r1, #0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 faae 	bl	80077b8 <USBH_CtlReq>
 800725c:	4603      	mov	r3, r0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	4613      	mov	r3, r2
 8007272:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	785a      	ldrb	r2, [r3, #1]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	3302      	adds	r3, #2
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b29a      	uxth	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	3303      	adds	r3, #3
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	b29b      	uxth	r3, r3
 8007298:	4313      	orrs	r3, r2
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	791a      	ldrb	r2, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	795a      	ldrb	r2, [r3, #5]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	799a      	ldrb	r2, [r3, #6]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	79da      	ldrb	r2, [r3, #7]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	79db      	ldrb	r3, [r3, #7]
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	dc11      	bgt.n	80072ec <USBH_ParseDevDesc+0x86>
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	db16      	blt.n	80072fa <USBH_ParseDevDesc+0x94>
 80072cc:	3b08      	subs	r3, #8
 80072ce:	2201      	movs	r2, #1
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80072d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bf14      	ite	ne
 80072e0:	2301      	movne	r3, #1
 80072e2:	2300      	moveq	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <USBH_ParseDevDesc+0x8a>
 80072ea:	e006      	b.n	80072fa <USBH_ParseDevDesc+0x94>
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d104      	bne.n	80072fa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	79da      	ldrb	r2, [r3, #7]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	71da      	strb	r2, [r3, #7]
      break;
 80072f8:	e003      	b.n	8007302 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2240      	movs	r2, #64	; 0x40
 80072fe:	71da      	strb	r2, [r3, #7]
      break;
 8007300:	bf00      	nop
  }

  if (length > 8U)
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	2b08      	cmp	r3, #8
 8007306:	d939      	bls.n	800737c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	3308      	adds	r3, #8
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	b29a      	uxth	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	3309      	adds	r3, #9
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	330a      	adds	r3, #10
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	b29a      	uxth	r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	330b      	adds	r3, #11
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	b29b      	uxth	r3, r3
 8007338:	4313      	orrs	r3, r2
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	330c      	adds	r3, #12
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	b29a      	uxth	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	330d      	adds	r3, #13
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	021b      	lsls	r3, r3, #8
 8007352:	b29b      	uxth	r3, r3
 8007354:	4313      	orrs	r3, r2
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	7b9a      	ldrb	r2, [r3, #14]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	7bda      	ldrb	r2, [r3, #15]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	7c1a      	ldrb	r2, [r3, #16]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	7c5a      	ldrb	r2, [r3, #17]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	745a      	strb	r2, [r3, #17]
  }
}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08c      	sub	sp, #48	; 0x30
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800739c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	781a      	ldrb	r2, [r3, #0]
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	785a      	ldrb	r2, [r3, #1]
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	3302      	adds	r3, #2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	3303      	adds	r3, #3
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	4313      	orrs	r3, r2
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e4:	bf28      	it	cs
 80073e6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	791a      	ldrb	r2, [r3, #4]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	795a      	ldrb	r2, [r3, #5]
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	799a      	ldrb	r2, [r3, #6]
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	79da      	ldrb	r2, [r3, #7]
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	7a1a      	ldrb	r2, [r3, #8]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b09      	cmp	r3, #9
 800741e:	d002      	beq.n	8007426 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	2209      	movs	r2, #9
 8007424:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	2b09      	cmp	r3, #9
 800742a:	f240 809d 	bls.w	8007568 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800742e:	2309      	movs	r3, #9
 8007430:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007436:	e081      	b.n	800753c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007438:	f107 0316 	add.w	r3, r7, #22
 800743c:	4619      	mov	r1, r3
 800743e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007440:	f000 f99f 	bl	8007782 <USBH_GetNextDesc>
 8007444:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	2b04      	cmp	r3, #4
 800744c:	d176      	bne.n	800753c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b09      	cmp	r3, #9
 8007454:	d002      	beq.n	800745c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	2209      	movs	r2, #9
 800745a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800745c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007460:	221a      	movs	r2, #26
 8007462:	fb02 f303 	mul.w	r3, r2, r3
 8007466:	3308      	adds	r3, #8
 8007468:	6a3a      	ldr	r2, [r7, #32]
 800746a:	4413      	add	r3, r2
 800746c:	3302      	adds	r3, #2
 800746e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007472:	69f8      	ldr	r0, [r7, #28]
 8007474:	f000 f87e 	bl	8007574 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007482:	e043      	b.n	800750c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007484:	f107 0316 	add.w	r3, r7, #22
 8007488:	4619      	mov	r1, r3
 800748a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748c:	f000 f979 	bl	8007782 <USBH_GetNextDesc>
 8007490:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	2b05      	cmp	r3, #5
 8007498:	d138      	bne.n	800750c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	795b      	ldrb	r3, [r3, #5]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10f      	bne.n	80074c2 <USBH_ParseCfgDesc+0x13a>
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	799b      	ldrb	r3, [r3, #6]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d10b      	bne.n	80074c2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	79db      	ldrb	r3, [r3, #7]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10f      	bne.n	80074d2 <USBH_ParseCfgDesc+0x14a>
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	d00b      	beq.n	80074d2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	2209      	movs	r2, #9
 80074be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074c0:	e007      	b.n	80074d2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b07      	cmp	r3, #7
 80074c8:	d004      	beq.n	80074d4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	2207      	movs	r2, #7
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e000      	b.n	80074d4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074d2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074dc:	3201      	adds	r2, #1
 80074de:	00d2      	lsls	r2, r2, #3
 80074e0:	211a      	movs	r1, #26
 80074e2:	fb01 f303 	mul.w	r3, r1, r3
 80074e6:	4413      	add	r3, r2
 80074e8:	3308      	adds	r3, #8
 80074ea:	6a3a      	ldr	r2, [r7, #32]
 80074ec:	4413      	add	r3, r2
 80074ee:	3304      	adds	r3, #4
 80074f0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80074f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f4:	69b9      	ldr	r1, [r7, #24]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f86b 	bl	80075d2 <USBH_ParseEPDesc>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007506:	3301      	adds	r3, #1
 8007508:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	791b      	ldrb	r3, [r3, #4]
 8007510:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007514:	429a      	cmp	r2, r3
 8007516:	d204      	bcs.n	8007522 <USBH_ParseCfgDesc+0x19a>
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	885a      	ldrh	r2, [r3, #2]
 800751c:	8afb      	ldrh	r3, [r7, #22]
 800751e:	429a      	cmp	r2, r3
 8007520:	d8b0      	bhi.n	8007484 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	791b      	ldrb	r3, [r3, #4]
 8007526:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800752a:	429a      	cmp	r2, r3
 800752c:	d201      	bcs.n	8007532 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800752e:	2303      	movs	r3, #3
 8007530:	e01c      	b.n	800756c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007536:	3301      	adds	r3, #1
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800753c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007540:	2b01      	cmp	r3, #1
 8007542:	d805      	bhi.n	8007550 <USBH_ParseCfgDesc+0x1c8>
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	885a      	ldrh	r2, [r3, #2]
 8007548:	8afb      	ldrh	r3, [r7, #22]
 800754a:	429a      	cmp	r2, r3
 800754c:	f63f af74 	bhi.w	8007438 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	791b      	ldrb	r3, [r3, #4]
 8007554:	2b02      	cmp	r3, #2
 8007556:	bf28      	it	cs
 8007558:	2302      	movcs	r3, #2
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007560:	429a      	cmp	r2, r3
 8007562:	d201      	bcs.n	8007568 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007564:	2303      	movs	r3, #3
 8007566:	e001      	b.n	800756c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800756c:	4618      	mov	r0, r3
 800756e:	3730      	adds	r7, #48	; 0x30
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	785a      	ldrb	r2, [r3, #1]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	789a      	ldrb	r2, [r3, #2]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	78da      	ldrb	r2, [r3, #3]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	791a      	ldrb	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	795a      	ldrb	r2, [r3, #5]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	799a      	ldrb	r2, [r3, #6]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	79da      	ldrb	r2, [r3, #7]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	7a1a      	ldrb	r2, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	721a      	strb	r2, [r3, #8]
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b087      	sub	sp, #28
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	785a      	ldrb	r2, [r3, #1]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	789a      	ldrb	r2, [r3, #2]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	78da      	ldrb	r2, [r3, #3]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3304      	adds	r3, #4
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3305      	adds	r3, #5
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	b29b      	uxth	r3, r3
 8007616:	4313      	orrs	r3, r2
 8007618:	b29a      	uxth	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	799a      	ldrb	r2, [r3, #6]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	889b      	ldrh	r3, [r3, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800762e:	2303      	movs	r3, #3
 8007630:	75fb      	strb	r3, [r7, #23]
 8007632:	e033      	b.n	800769c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	889b      	ldrh	r3, [r3, #4]
 8007638:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800763c:	f023 0307 	bic.w	r3, r3, #7
 8007640:	b29a      	uxth	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	889b      	ldrh	r3, [r3, #4]
 800764a:	b21a      	sxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3304      	adds	r3, #4
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b299      	uxth	r1, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3305      	adds	r3, #5
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	b29b      	uxth	r3, r3
 8007660:	430b      	orrs	r3, r1
 8007662:	b29b      	uxth	r3, r3
 8007664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007668:	2b00      	cmp	r3, #0
 800766a:	d110      	bne.n	800768e <USBH_ParseEPDesc+0xbc>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	b299      	uxth	r1, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3305      	adds	r3, #5
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	b29b      	uxth	r3, r3
 8007680:	430b      	orrs	r3, r1
 8007682:	b29b      	uxth	r3, r3
 8007684:	b21b      	sxth	r3, r3
 8007686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800768a:	b21b      	sxth	r3, r3
 800768c:	e001      	b.n	8007692 <USBH_ParseEPDesc+0xc0>
 800768e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007692:	4313      	orrs	r3, r2
 8007694:	b21b      	sxth	r3, r3
 8007696:	b29a      	uxth	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d116      	bne.n	80076d4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	78db      	ldrb	r3, [r3, #3]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d005      	beq.n	80076be <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	78db      	ldrb	r3, [r3, #3]
 80076b6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d127      	bne.n	800770e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	799b      	ldrb	r3, [r3, #6]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <USBH_ParseEPDesc+0xfc>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	799b      	ldrb	r3, [r3, #6]
 80076ca:	2b10      	cmp	r3, #16
 80076cc:	d91f      	bls.n	800770e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076ce:	2303      	movs	r3, #3
 80076d0:	75fb      	strb	r3, [r7, #23]
 80076d2:	e01c      	b.n	800770e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	78db      	ldrb	r3, [r3, #3]
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d10a      	bne.n	80076f6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	799b      	ldrb	r3, [r3, #6]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <USBH_ParseEPDesc+0x11e>
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	799b      	ldrb	r3, [r3, #6]
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d90e      	bls.n	800770e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076f0:	2303      	movs	r3, #3
 80076f2:	75fb      	strb	r3, [r7, #23]
 80076f4:	e00b      	b.n	800770e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	78db      	ldrb	r3, [r3, #3]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d105      	bne.n	800770e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	799b      	ldrb	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800770a:	2303      	movs	r3, #3
 800770c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800770e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b03      	cmp	r3, #3
 8007732:	d120      	bne.n	8007776 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	1e9a      	subs	r2, r3, #2
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	4293      	cmp	r3, r2
 800773e:	bf28      	it	cs
 8007740:	4613      	movcs	r3, r2
 8007742:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3302      	adds	r3, #2
 8007748:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800774a:	2300      	movs	r3, #0
 800774c:	82fb      	strh	r3, [r7, #22]
 800774e:	e00b      	b.n	8007768 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007750:	8afb      	ldrh	r3, [r7, #22]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	781a      	ldrb	r2, [r3, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	3301      	adds	r3, #1
 8007760:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007762:	8afb      	ldrh	r3, [r7, #22]
 8007764:	3302      	adds	r3, #2
 8007766:	82fb      	strh	r3, [r7, #22]
 8007768:	8afa      	ldrh	r2, [r7, #22]
 800776a:	8abb      	ldrh	r3, [r7, #20]
 800776c:	429a      	cmp	r2, r3
 800776e:	d3ef      	bcc.n	8007750 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	701a      	strb	r2, [r3, #0]
  }
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	881a      	ldrh	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	4413      	add	r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077aa:	68fb      	ldr	r3, [r7, #12]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077c6:	2301      	movs	r3, #1
 80077c8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <USBH_CtlReq+0x20>
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d00f      	beq.n	80077f6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077d6:	e027      	b.n	8007828 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	88fa      	ldrh	r2, [r7, #6]
 80077e2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2202      	movs	r2, #2
 80077ee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80077f0:	2301      	movs	r3, #1
 80077f2:	75fb      	strb	r3, [r7, #23]
      break;
 80077f4:	e018      	b.n	8007828 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f81c 	bl	8007834 <USBH_HandleControl>
 80077fc:	4603      	mov	r3, r0
 80077fe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <USBH_CtlReq+0x54>
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d106      	bne.n	800781a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	761a      	strb	r2, [r3, #24]
      break;
 8007818:	e005      	b.n	8007826 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d102      	bne.n	8007826 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	709a      	strb	r2, [r3, #2]
      break;
 8007826:	bf00      	nop
  }
  return status;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af02      	add	r7, sp, #8
 800783a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800783c:	2301      	movs	r3, #1
 800783e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007840:	2300      	movs	r3, #0
 8007842:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7e1b      	ldrb	r3, [r3, #24]
 8007848:	3b01      	subs	r3, #1
 800784a:	2b0a      	cmp	r3, #10
 800784c:	f200 8156 	bhi.w	8007afc <USBH_HandleControl+0x2c8>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <USBH_HandleControl+0x24>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007885 	.word	0x08007885
 800785c:	0800789f 	.word	0x0800789f
 8007860:	08007909 	.word	0x08007909
 8007864:	0800792f 	.word	0x0800792f
 8007868:	08007967 	.word	0x08007967
 800786c:	08007991 	.word	0x08007991
 8007870:	080079e3 	.word	0x080079e3
 8007874:	08007a05 	.word	0x08007a05
 8007878:	08007a41 	.word	0x08007a41
 800787c:	08007a67 	.word	0x08007a67
 8007880:	08007aa5 	.word	0x08007aa5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f103 0110 	add.w	r1, r3, #16
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	795b      	ldrb	r3, [r3, #5]
 800788e:	461a      	mov	r2, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f943 	bl	8007b1c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2202      	movs	r2, #2
 800789a:	761a      	strb	r2, [r3, #24]
      break;
 800789c:	e139      	b.n	8007b12 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	795b      	ldrb	r3, [r3, #5]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fcc5 	bl	8008234 <USBH_LL_GetURBState>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d11e      	bne.n	80078f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7c1b      	ldrb	r3, [r3, #16]
 80078b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	8adb      	ldrh	r3, [r3, #22]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078c6:	7b7b      	ldrb	r3, [r7, #13]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d103      	bne.n	80078d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2203      	movs	r2, #3
 80078d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078d2:	e115      	b.n	8007b00 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2205      	movs	r2, #5
 80078d8:	761a      	strb	r2, [r3, #24]
      break;
 80078da:	e111      	b.n	8007b00 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078dc:	7b7b      	ldrb	r3, [r7, #13]
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d103      	bne.n	80078ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2209      	movs	r2, #9
 80078e6:	761a      	strb	r2, [r3, #24]
      break;
 80078e8:	e10a      	b.n	8007b00 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2207      	movs	r2, #7
 80078ee:	761a      	strb	r2, [r3, #24]
      break;
 80078f0:	e106      	b.n	8007b00 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d003      	beq.n	8007900 <USBH_HandleControl+0xcc>
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	f040 8100 	bne.w	8007b00 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	220b      	movs	r2, #11
 8007904:	761a      	strb	r2, [r3, #24]
      break;
 8007906:	e0fb      	b.n	8007b00 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800790e:	b29a      	uxth	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6899      	ldr	r1, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	899a      	ldrh	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	791b      	ldrb	r3, [r3, #4]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f93a 	bl	8007b9a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	761a      	strb	r2, [r3, #24]
      break;
 800792c:	e0f1      	b.n	8007b12 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	791b      	ldrb	r3, [r3, #4]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fc7d 	bl	8008234 <USBH_LL_GetURBState>
 800793a:	4603      	mov	r3, r0
 800793c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d102      	bne.n	800794a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2209      	movs	r2, #9
 8007948:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b05      	cmp	r3, #5
 800794e:	d102      	bne.n	8007956 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007950:	2303      	movs	r3, #3
 8007952:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007954:	e0d6      	b.n	8007b04 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b04      	cmp	r3, #4
 800795a:	f040 80d3 	bne.w	8007b04 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	220b      	movs	r2, #11
 8007962:	761a      	strb	r2, [r3, #24]
      break;
 8007964:	e0ce      	b.n	8007b04 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6899      	ldr	r1, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	899a      	ldrh	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	795b      	ldrb	r3, [r3, #5]
 8007972:	2001      	movs	r0, #1
 8007974:	9000      	str	r0, [sp, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8ea 	bl	8007b50 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2206      	movs	r2, #6
 800798c:	761a      	strb	r2, [r3, #24]
      break;
 800798e:	e0c0      	b.n	8007b12 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	795b      	ldrb	r3, [r3, #5]
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fc4c 	bl	8008234 <USBH_LL_GetURBState>
 800799c:	4603      	mov	r3, r0
 800799e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d103      	bne.n	80079ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2207      	movs	r2, #7
 80079aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079ac:	e0ac      	b.n	8007b08 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	d105      	bne.n	80079c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	220c      	movs	r2, #12
 80079b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079ba:	2303      	movs	r3, #3
 80079bc:	73fb      	strb	r3, [r7, #15]
      break;
 80079be:	e0a3      	b.n	8007b08 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d103      	bne.n	80079ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2205      	movs	r2, #5
 80079ca:	761a      	strb	r2, [r3, #24]
      break;
 80079cc:	e09c      	b.n	8007b08 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	f040 8099 	bne.w	8007b08 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	220b      	movs	r2, #11
 80079da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079dc:	2302      	movs	r3, #2
 80079de:	73fb      	strb	r3, [r7, #15]
      break;
 80079e0:	e092      	b.n	8007b08 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	791b      	ldrb	r3, [r3, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f8d5 	bl	8007b9a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2208      	movs	r2, #8
 8007a00:	761a      	strb	r2, [r3, #24]

      break;
 8007a02:	e086      	b.n	8007b12 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	791b      	ldrb	r3, [r3, #4]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fc12 	bl	8008234 <USBH_LL_GetURBState>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d105      	bne.n	8007a26 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	220d      	movs	r2, #13
 8007a1e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a24:	e072      	b.n	8007b0c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d103      	bne.n	8007a34 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	220b      	movs	r2, #11
 8007a30:	761a      	strb	r2, [r3, #24]
      break;
 8007a32:	e06b      	b.n	8007b0c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b05      	cmp	r3, #5
 8007a38:	d168      	bne.n	8007b0c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a3e:	e065      	b.n	8007b0c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	795b      	ldrb	r3, [r3, #5]
 8007a44:	2201      	movs	r2, #1
 8007a46:	9200      	str	r2, [sp, #0]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f87f 	bl	8007b50 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	220a      	movs	r2, #10
 8007a62:	761a      	strb	r2, [r3, #24]
      break;
 8007a64:	e055      	b.n	8007b12 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fbe1 	bl	8008234 <USBH_LL_GetURBState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d105      	bne.n	8007a88 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	220d      	movs	r2, #13
 8007a84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a86:	e043      	b.n	8007b10 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d103      	bne.n	8007a96 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2209      	movs	r2, #9
 8007a92:	761a      	strb	r2, [r3, #24]
      break;
 8007a94:	e03c      	b.n	8007b10 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d139      	bne.n	8007b10 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	220b      	movs	r2, #11
 8007aa0:	761a      	strb	r2, [r3, #24]
      break;
 8007aa2:	e035      	b.n	8007b10 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7e5b      	ldrb	r3, [r3, #25]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	765a      	strb	r2, [r3, #25]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	7e5b      	ldrb	r3, [r3, #25]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d806      	bhi.n	8007ac6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ac4:	e025      	b.n	8007b12 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007acc:	2106      	movs	r1, #6
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	795b      	ldrb	r3, [r3, #5]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f90c 	bl	8007cfc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	791b      	ldrb	r3, [r3, #4]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f906 	bl	8007cfc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007af6:	2302      	movs	r3, #2
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	e00a      	b.n	8007b12 <USBH_HandleControl+0x2de>

    default:
      break;
 8007afc:	bf00      	nop
 8007afe:	e008      	b.n	8007b12 <USBH_HandleControl+0x2de>
      break;
 8007b00:	bf00      	nop
 8007b02:	e006      	b.n	8007b12 <USBH_HandleControl+0x2de>
      break;
 8007b04:	bf00      	nop
 8007b06:	e004      	b.n	8007b12 <USBH_HandleControl+0x2de>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e002      	b.n	8007b12 <USBH_HandleControl+0x2de>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <USBH_HandleControl+0x2de>
      break;
 8007b10:	bf00      	nop
  }

  return status;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4613      	mov	r3, r2
 8007b28:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b2a:	79f9      	ldrb	r1, [r7, #7]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9303      	str	r3, [sp, #12]
 8007b30:	2308      	movs	r3, #8
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fb46 	bl	80081d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af04      	add	r7, sp, #16
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	460b      	mov	r3, r1
 8007b60:	80fb      	strh	r3, [r7, #6]
 8007b62:	4613      	mov	r3, r2
 8007b64:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b74:	7979      	ldrb	r1, [r7, #5]
 8007b76:	7e3b      	ldrb	r3, [r7, #24]
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	9302      	str	r3, [sp, #8]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	2301      	movs	r3, #1
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	2200      	movs	r2, #0
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 fb21 	bl	80081d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b088      	sub	sp, #32
 8007b9e:	af04      	add	r7, sp, #16
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	460b      	mov	r3, r1
 8007baa:	80fb      	strh	r3, [r7, #6]
 8007bac:	4613      	mov	r3, r2
 8007bae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bb0:	7979      	ldrb	r1, [r7, #5]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9303      	str	r3, [sp, #12]
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fb03 	bl	80081d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007bcc:	2300      	movs	r3, #0

}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b088      	sub	sp, #32
 8007bda:	af04      	add	r7, sp, #16
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	4611      	mov	r1, r2
 8007be2:	461a      	mov	r2, r3
 8007be4:	460b      	mov	r3, r1
 8007be6:	80fb      	strh	r3, [r7, #6]
 8007be8:	4613      	mov	r3, r2
 8007bea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bfa:	7979      	ldrb	r1, [r7, #5]
 8007bfc:	7e3b      	ldrb	r3, [r7, #24]
 8007bfe:	9303      	str	r3, [sp, #12]
 8007c00:	88fb      	ldrh	r3, [r7, #6]
 8007c02:	9302      	str	r3, [sp, #8]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	2301      	movs	r3, #1
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fade 	bl	80081d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af04      	add	r7, sp, #16
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	460b      	mov	r3, r1
 8007c30:	80fb      	strh	r3, [r7, #6]
 8007c32:	4613      	mov	r3, r2
 8007c34:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c36:	7979      	ldrb	r1, [r7, #5]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9303      	str	r3, [sp, #12]
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	9302      	str	r3, [sp, #8]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	2301      	movs	r3, #1
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2302      	movs	r3, #2
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fac0 	bl	80081d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af04      	add	r7, sp, #16
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	70fb      	strb	r3, [r7, #3]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70bb      	strb	r3, [r7, #2]
 8007c72:	4613      	mov	r3, r2
 8007c74:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c76:	7878      	ldrb	r0, [r7, #1]
 8007c78:	78ba      	ldrb	r2, [r7, #2]
 8007c7a:	78f9      	ldrb	r1, [r7, #3]
 8007c7c:	8b3b      	ldrh	r3, [r7, #24]
 8007c7e:	9302      	str	r3, [sp, #8]
 8007c80:	7d3b      	ldrb	r3, [r7, #20]
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	7c3b      	ldrb	r3, [r7, #16]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	4603      	mov	r3, r0
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa53 	bl	8008136 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa72 	bl	8008194 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f836 	bl	8007d38 <USBH_GetFreePipe>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007cd0:	89fb      	ldrh	r3, [r7, #14]
 8007cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00a      	beq.n	8007cf0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	89fb      	ldrh	r3, [r7, #14]
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	33e0      	adds	r3, #224	; 0xe0
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007cf0:	89fb      	ldrh	r3, [r7, #14]
 8007cf2:	b2db      	uxtb	r3, r3
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	2b0f      	cmp	r3, #15
 8007d0c:	d80d      	bhi.n	8007d2a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	33e0      	adds	r3, #224	; 0xe0
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	33e0      	adds	r3, #224	; 0xe0
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
 8007d48:	e00f      	b.n	8007d6a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	33e0      	adds	r3, #224	; 0xe0
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d102      	bne.n	8007d64 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	e007      	b.n	8007d74 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	3301      	adds	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	2b0f      	cmp	r3, #15
 8007d6e:	d9ec      	bls.n	8007d4a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d84:	2201      	movs	r2, #1
 8007d86:	490e      	ldr	r1, [pc, #56]	; (8007dc0 <MX_USB_HOST_Init+0x40>)
 8007d88:	480e      	ldr	r0, [pc, #56]	; (8007dc4 <MX_USB_HOST_Init+0x44>)
 8007d8a:	f7fe fba7 	bl	80064dc <USBH_Init>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d94:	f7f8 fe34 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d98:	490b      	ldr	r1, [pc, #44]	; (8007dc8 <MX_USB_HOST_Init+0x48>)
 8007d9a:	480a      	ldr	r0, [pc, #40]	; (8007dc4 <MX_USB_HOST_Init+0x44>)
 8007d9c:	f7fe fc2c 	bl	80065f8 <USBH_RegisterClass>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007da6:	f7f8 fe2b 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007daa:	4806      	ldr	r0, [pc, #24]	; (8007dc4 <MX_USB_HOST_Init+0x44>)
 8007dac:	f7fe fcb0 	bl	8006710 <USBH_Start>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007db6:	f7f8 fe23 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08007de1 	.word	0x08007de1
 8007dc4:	200001ec 	.word	0x200001ec
 8007dc8:	2000000c 	.word	0x2000000c

08007dcc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007dd0:	4802      	ldr	r0, [pc, #8]	; (8007ddc <MX_USB_HOST_Process+0x10>)
 8007dd2:	f7fe fcad 	bl	8006730 <USBH_Process>
}
 8007dd6:	bf00      	nop
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200001ec 	.word	0x200001ec

08007de0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d819      	bhi.n	8007e28 <USBH_UserProcess+0x48>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <USBH_UserProcess+0x1c>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e29 	.word	0x08007e29
 8007e08:	08007e21 	.word	0x08007e21
 8007e0c:	08007e11 	.word	0x08007e11
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e10:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <USBH_UserProcess+0x58>)
 8007e12:	2203      	movs	r2, #3
 8007e14:	701a      	strb	r2, [r3, #0]
  break;
 8007e16:	e008      	b.n	8007e2a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <USBH_UserProcess+0x58>)
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	701a      	strb	r2, [r3, #0]
  break;
 8007e1e:	e004      	b.n	8007e2a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <USBH_UserProcess+0x58>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	701a      	strb	r2, [r3, #0]
  break;
 8007e26:	e000      	b.n	8007e2a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e28:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	200005c4 	.word	0x200005c4

08007e3c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	; 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e44:	f107 0314 	add.w	r3, r7, #20
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	609a      	str	r2, [r3, #8]
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e5c:	d147      	bne.n	8007eee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	4a24      	ldr	r2, [pc, #144]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007e68:	f043 0301 	orr.w	r3, r3, #1
 8007e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e6e:	4b22      	ldr	r3, [pc, #136]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e88:	f107 0314 	add.w	r3, r7, #20
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	481b      	ldr	r0, [pc, #108]	; (8007efc <HAL_HCD_MspInit+0xc0>)
 8007e90:	f7f9 f9dc 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ea6:	230a      	movs	r3, #10
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eaa:	f107 0314 	add.w	r3, r7, #20
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4812      	ldr	r0, [pc, #72]	; (8007efc <HAL_HCD_MspInit+0xc0>)
 8007eb2:	f7f9 f9cb 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	4a0f      	ldr	r2, [pc, #60]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec0:	6353      	str	r3, [r2, #52]	; 0x34
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eca:	4a0b      	ldr	r2, [pc, #44]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <HAL_HCD_MspInit+0xbc>)
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	2043      	movs	r0, #67	; 0x43
 8007ee4:	f7f9 f97b 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ee8:	2043      	movs	r0, #67	; 0x43
 8007eea:	f7f9 f994 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007eee:	bf00      	nop
 8007ef0:	3728      	adds	r7, #40	; 0x28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40023800 	.word	0x40023800
 8007efc:	40020000 	.word	0x40020000

08007f00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe ffed 	bl	8006eee <USBH_LL_IncTimer>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff f825 	bl	8006f7a <USBH_LL_Connect>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff f82e 	bl	8006fa8 <USBH_LL_Disconnect>
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
 8007f60:	4613      	mov	r3, r2
 8007f62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe ffdf 	bl	8006f42 <USBH_LL_PortEnabled>
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe ffdf 	bl	8006f5e <USBH_LL_PortDisabled>
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d12a      	bne.n	8008010 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fba:	4a18      	ldr	r2, [pc, #96]	; (800801c <USBH_LL_Init+0x74>)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a15      	ldr	r2, [pc, #84]	; (800801c <USBH_LL_Init+0x74>)
 8007fc6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fca:	4b14      	ldr	r3, [pc, #80]	; (800801c <USBH_LL_Init+0x74>)
 8007fcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <USBH_LL_Init+0x74>)
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fd8:	4b10      	ldr	r3, [pc, #64]	; (800801c <USBH_LL_Init+0x74>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <USBH_LL_Init+0x74>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	; (800801c <USBH_LL_Init+0x74>)
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <USBH_LL_Init+0x74>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ff0:	480a      	ldr	r0, [pc, #40]	; (800801c <USBH_LL_Init+0x74>)
 8007ff2:	f7f9 fae0 	bl	80015b6 <HAL_HCD_Init>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ffc:	f7f8 fd00 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008000:	4806      	ldr	r0, [pc, #24]	; (800801c <USBH_LL_Init+0x74>)
 8008002:	f7f9 fec4 	bl	8001d8e <HAL_HCD_GetCurrentFrame>
 8008006:	4603      	mov	r3, r0
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fe ff60 	bl	8006ed0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	200005c8 	.word	0x200005c8

08008020 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008036:	4618      	mov	r0, r3
 8008038:	f7f9 fe33 	bl	8001ca2 <HAL_HCD_Start>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f95c 	bl	8008300 <USBH_Get_USB_Status>
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800804c:	7bbb      	ldrb	r3, [r7, #14]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800806c:	4618      	mov	r0, r3
 800806e:	f7f9 fe3b 	bl	8001ce8 <HAL_HCD_Stop>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f941 	bl	8008300 <USBH_Get_USB_Status>
 800807e:	4603      	mov	r3, r0
 8008080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008082:	7bbb      	ldrb	r3, [r7, #14]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f9 fe83 	bl	8001daa <HAL_HCD_GetCurrentSpeed>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d00c      	beq.n	80080c4 <USBH_LL_GetSpeed+0x38>
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d80d      	bhi.n	80080ca <USBH_LL_GetSpeed+0x3e>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <USBH_LL_GetSpeed+0x2c>
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d003      	beq.n	80080be <USBH_LL_GetSpeed+0x32>
 80080b6:	e008      	b.n	80080ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
    break;
 80080bc:	e008      	b.n	80080d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080be:	2301      	movs	r3, #1
 80080c0:	73fb      	strb	r3, [r7, #15]
    break;
 80080c2:	e005      	b.n	80080d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080c4:	2302      	movs	r3, #2
 80080c6:	73fb      	strb	r3, [r7, #15]
    break;
 80080c8:	e002      	b.n	80080d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080ca:	2301      	movs	r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
    break;
 80080ce:	bf00      	nop
  }
  return  speed;
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7f9 fe16 	bl	8001d22 <HAL_HCD_ResetPort>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 f8ff 	bl	8008300 <USBH_Get_USB_Status>
 8008102:	4603      	mov	r3, r0
 8008104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008106:	7bbb      	ldrb	r3, [r7, #14]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008122:	78fa      	ldrb	r2, [r7, #3]
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f7f9 fe1d 	bl	8001d66 <HAL_HCD_HC_GetXferCount>
 800812c:	4603      	mov	r3, r0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008136:	b590      	push	{r4, r7, lr}
 8008138:	b089      	sub	sp, #36	; 0x24
 800813a:	af04      	add	r7, sp, #16
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	461a      	mov	r2, r3
 8008144:	4603      	mov	r3, r0
 8008146:	70fb      	strb	r3, [r7, #3]
 8008148:	460b      	mov	r3, r1
 800814a:	70bb      	strb	r3, [r7, #2]
 800814c:	4613      	mov	r3, r2
 800814e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800815e:	787c      	ldrb	r4, [r7, #1]
 8008160:	78ba      	ldrb	r2, [r7, #2]
 8008162:	78f9      	ldrb	r1, [r7, #3]
 8008164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008166:	9302      	str	r3, [sp, #8]
 8008168:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	4623      	mov	r3, r4
 8008176:	f7f9 fa80 	bl	800167a <HAL_HCD_HC_Init>
 800817a:	4603      	mov	r3, r0
 800817c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	4618      	mov	r0, r3
 8008182:	f000 f8bd 	bl	8008300 <USBH_Get_USB_Status>
 8008186:	4603      	mov	r3, r0
 8008188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800818a:	7bbb      	ldrb	r3, [r7, #14]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	bd90      	pop	{r4, r7, pc}

08008194 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ae:	78fa      	ldrb	r2, [r7, #3]
 80081b0:	4611      	mov	r1, r2
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7f9 faf0 	bl	8001798 <HAL_HCD_HC_Halt>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f89e 	bl	8008300 <USBH_Get_USB_Status>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081d2:	b590      	push	{r4, r7, lr}
 80081d4:	b089      	sub	sp, #36	; 0x24
 80081d6:	af04      	add	r7, sp, #16
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	4608      	mov	r0, r1
 80081dc:	4611      	mov	r1, r2
 80081de:	461a      	mov	r2, r3
 80081e0:	4603      	mov	r3, r0
 80081e2:	70fb      	strb	r3, [r7, #3]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70bb      	strb	r3, [r7, #2]
 80081e8:	4613      	mov	r3, r2
 80081ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081fa:	787c      	ldrb	r4, [r7, #1]
 80081fc:	78ba      	ldrb	r2, [r7, #2]
 80081fe:	78f9      	ldrb	r1, [r7, #3]
 8008200:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008208:	9302      	str	r3, [sp, #8]
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	4623      	mov	r3, r4
 8008216:	f7f9 fae3 	bl	80017e0 <HAL_HCD_HC_SubmitRequest>
 800821a:	4603      	mov	r3, r0
 800821c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 f86d 	bl	8008300 <USBH_Get_USB_Status>
 8008226:	4603      	mov	r3, r0
 8008228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822a:	7bbb      	ldrb	r3, [r7, #14]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	bd90      	pop	{r4, r7, pc}

08008234 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7f9 fd77 	bl	8001d3e <HAL_HCD_HC_GetURBState>
 8008250:	4603      	mov	r3, r0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800826c:	2b01      	cmp	r3, #1
 800826e:	d103      	bne.n	8008278 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f870 	bl	8008358 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008278:	20c8      	movs	r0, #200	; 0xc8
 800827a:	f7f8 feb1 	bl	8000fe0 <HAL_Delay>
  return USBH_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
 8008294:	4613      	mov	r3, r2
 8008296:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800829e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	212c      	movs	r1, #44	; 0x2c
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	333b      	adds	r3, #59	; 0x3b
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	212c      	movs	r1, #44	; 0x2c
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	4413      	add	r3, r2
 80082c0:	3354      	adds	r3, #84	; 0x54
 80082c2:	78ba      	ldrb	r2, [r7, #2]
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	e008      	b.n	80082da <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	212c      	movs	r1, #44	; 0x2c
 80082ce:	fb01 f303 	mul.w	r3, r1, r3
 80082d2:	4413      	add	r3, r2
 80082d4:	3355      	adds	r3, #85	; 0x55
 80082d6:	78ba      	ldrb	r2, [r7, #2]
 80082d8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7f8 fe75 	bl	8000fe0 <HAL_Delay>
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d817      	bhi.n	8008344 <USBH_Get_USB_Status+0x44>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <USBH_Get_USB_Status+0x1c>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	0800832d 	.word	0x0800832d
 8008320:	08008333 	.word	0x08008333
 8008324:	08008339 	.word	0x08008339
 8008328:	0800833f 	.word	0x0800833f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
    break;
 8008330:	e00b      	b.n	800834a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008332:	2302      	movs	r3, #2
 8008334:	73fb      	strb	r3, [r7, #15]
    break;
 8008336:	e008      	b.n	800834a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
    break;
 800833c:	e005      	b.n	800834a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800833e:	2302      	movs	r3, #2
 8008340:	73fb      	strb	r3, [r7, #15]
    break;
 8008342:	e002      	b.n	800834a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008344:	2302      	movs	r3, #2
 8008346:	73fb      	strb	r3, [r7, #15]
    break;
 8008348:	bf00      	nop
  }
  return usb_status;
 800834a:	7bfb      	ldrb	r3, [r7, #15]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
 8008370:	e001      	b.n	8008376 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008372:	2301      	movs	r3, #1
 8008374:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	461a      	mov	r2, r3
 800837a:	2101      	movs	r1, #1
 800837c:	4803      	ldr	r0, [pc, #12]	; (800838c <MX_DriverVbusFS+0x34>)
 800837e:	f7f9 f901 	bl	8001584 <HAL_GPIO_WritePin>
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	40020800 	.word	0x40020800

08008390 <__errno>:
 8008390:	4b01      	ldr	r3, [pc, #4]	; (8008398 <__errno+0x8>)
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	2000002c 	.word	0x2000002c

0800839c <__libc_init_array>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	4d0d      	ldr	r5, [pc, #52]	; (80083d4 <__libc_init_array+0x38>)
 80083a0:	4c0d      	ldr	r4, [pc, #52]	; (80083d8 <__libc_init_array+0x3c>)
 80083a2:	1b64      	subs	r4, r4, r5
 80083a4:	10a4      	asrs	r4, r4, #2
 80083a6:	2600      	movs	r6, #0
 80083a8:	42a6      	cmp	r6, r4
 80083aa:	d109      	bne.n	80083c0 <__libc_init_array+0x24>
 80083ac:	4d0b      	ldr	r5, [pc, #44]	; (80083dc <__libc_init_array+0x40>)
 80083ae:	4c0c      	ldr	r4, [pc, #48]	; (80083e0 <__libc_init_array+0x44>)
 80083b0:	f000 fd2e 	bl	8008e10 <_init>
 80083b4:	1b64      	subs	r4, r4, r5
 80083b6:	10a4      	asrs	r4, r4, #2
 80083b8:	2600      	movs	r6, #0
 80083ba:	42a6      	cmp	r6, r4
 80083bc:	d105      	bne.n	80083ca <__libc_init_array+0x2e>
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c4:	4798      	blx	r3
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7ee      	b.n	80083a8 <__libc_init_array+0xc>
 80083ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ce:	4798      	blx	r3
 80083d0:	3601      	adds	r6, #1
 80083d2:	e7f2      	b.n	80083ba <__libc_init_array+0x1e>
 80083d4:	08008ec0 	.word	0x08008ec0
 80083d8:	08008ec0 	.word	0x08008ec0
 80083dc:	08008ec0 	.word	0x08008ec0
 80083e0:	08008ec4 	.word	0x08008ec4

080083e4 <malloc>:
 80083e4:	4b02      	ldr	r3, [pc, #8]	; (80083f0 <malloc+0xc>)
 80083e6:	4601      	mov	r1, r0
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f000 b87f 	b.w	80084ec <_malloc_r>
 80083ee:	bf00      	nop
 80083f0:	2000002c 	.word	0x2000002c

080083f4 <free>:
 80083f4:	4b02      	ldr	r3, [pc, #8]	; (8008400 <free+0xc>)
 80083f6:	4601      	mov	r1, r0
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f000 b80b 	b.w	8008414 <_free_r>
 80083fe:	bf00      	nop
 8008400:	2000002c 	.word	0x2000002c

08008404 <memset>:
 8008404:	4402      	add	r2, r0
 8008406:	4603      	mov	r3, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <_free_r>:
 8008414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008416:	2900      	cmp	r1, #0
 8008418:	d044      	beq.n	80084a4 <_free_r+0x90>
 800841a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841e:	9001      	str	r0, [sp, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f1a1 0404 	sub.w	r4, r1, #4
 8008426:	bfb8      	it	lt
 8008428:	18e4      	addlt	r4, r4, r3
 800842a:	f000 fc39 	bl	8008ca0 <__malloc_lock>
 800842e:	4a1e      	ldr	r2, [pc, #120]	; (80084a8 <_free_r+0x94>)
 8008430:	9801      	ldr	r0, [sp, #4]
 8008432:	6813      	ldr	r3, [r2, #0]
 8008434:	b933      	cbnz	r3, 8008444 <_free_r+0x30>
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	6014      	str	r4, [r2, #0]
 800843a:	b003      	add	sp, #12
 800843c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008440:	f000 bc34 	b.w	8008cac <__malloc_unlock>
 8008444:	42a3      	cmp	r3, r4
 8008446:	d908      	bls.n	800845a <_free_r+0x46>
 8008448:	6825      	ldr	r5, [r4, #0]
 800844a:	1961      	adds	r1, r4, r5
 800844c:	428b      	cmp	r3, r1
 800844e:	bf01      	itttt	eq
 8008450:	6819      	ldreq	r1, [r3, #0]
 8008452:	685b      	ldreq	r3, [r3, #4]
 8008454:	1949      	addeq	r1, r1, r5
 8008456:	6021      	streq	r1, [r4, #0]
 8008458:	e7ed      	b.n	8008436 <_free_r+0x22>
 800845a:	461a      	mov	r2, r3
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	b10b      	cbz	r3, 8008464 <_free_r+0x50>
 8008460:	42a3      	cmp	r3, r4
 8008462:	d9fa      	bls.n	800845a <_free_r+0x46>
 8008464:	6811      	ldr	r1, [r2, #0]
 8008466:	1855      	adds	r5, r2, r1
 8008468:	42a5      	cmp	r5, r4
 800846a:	d10b      	bne.n	8008484 <_free_r+0x70>
 800846c:	6824      	ldr	r4, [r4, #0]
 800846e:	4421      	add	r1, r4
 8008470:	1854      	adds	r4, r2, r1
 8008472:	42a3      	cmp	r3, r4
 8008474:	6011      	str	r1, [r2, #0]
 8008476:	d1e0      	bne.n	800843a <_free_r+0x26>
 8008478:	681c      	ldr	r4, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	6053      	str	r3, [r2, #4]
 800847e:	4421      	add	r1, r4
 8008480:	6011      	str	r1, [r2, #0]
 8008482:	e7da      	b.n	800843a <_free_r+0x26>
 8008484:	d902      	bls.n	800848c <_free_r+0x78>
 8008486:	230c      	movs	r3, #12
 8008488:	6003      	str	r3, [r0, #0]
 800848a:	e7d6      	b.n	800843a <_free_r+0x26>
 800848c:	6825      	ldr	r5, [r4, #0]
 800848e:	1961      	adds	r1, r4, r5
 8008490:	428b      	cmp	r3, r1
 8008492:	bf04      	itt	eq
 8008494:	6819      	ldreq	r1, [r3, #0]
 8008496:	685b      	ldreq	r3, [r3, #4]
 8008498:	6063      	str	r3, [r4, #4]
 800849a:	bf04      	itt	eq
 800849c:	1949      	addeq	r1, r1, r5
 800849e:	6021      	streq	r1, [r4, #0]
 80084a0:	6054      	str	r4, [r2, #4]
 80084a2:	e7ca      	b.n	800843a <_free_r+0x26>
 80084a4:	b003      	add	sp, #12
 80084a6:	bd30      	pop	{r4, r5, pc}
 80084a8:	200008cc 	.word	0x200008cc

080084ac <sbrk_aligned>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4e0e      	ldr	r6, [pc, #56]	; (80084e8 <sbrk_aligned+0x3c>)
 80084b0:	460c      	mov	r4, r1
 80084b2:	6831      	ldr	r1, [r6, #0]
 80084b4:	4605      	mov	r5, r0
 80084b6:	b911      	cbnz	r1, 80084be <sbrk_aligned+0x12>
 80084b8:	f000 f902 	bl	80086c0 <_sbrk_r>
 80084bc:	6030      	str	r0, [r6, #0]
 80084be:	4621      	mov	r1, r4
 80084c0:	4628      	mov	r0, r5
 80084c2:	f000 f8fd 	bl	80086c0 <_sbrk_r>
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	d00a      	beq.n	80084e0 <sbrk_aligned+0x34>
 80084ca:	1cc4      	adds	r4, r0, #3
 80084cc:	f024 0403 	bic.w	r4, r4, #3
 80084d0:	42a0      	cmp	r0, r4
 80084d2:	d007      	beq.n	80084e4 <sbrk_aligned+0x38>
 80084d4:	1a21      	subs	r1, r4, r0
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 f8f2 	bl	80086c0 <_sbrk_r>
 80084dc:	3001      	adds	r0, #1
 80084de:	d101      	bne.n	80084e4 <sbrk_aligned+0x38>
 80084e0:	f04f 34ff 	mov.w	r4, #4294967295
 80084e4:	4620      	mov	r0, r4
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	200008d0 	.word	0x200008d0

080084ec <_malloc_r>:
 80084ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	1ccd      	adds	r5, r1, #3
 80084f2:	f025 0503 	bic.w	r5, r5, #3
 80084f6:	3508      	adds	r5, #8
 80084f8:	2d0c      	cmp	r5, #12
 80084fa:	bf38      	it	cc
 80084fc:	250c      	movcc	r5, #12
 80084fe:	2d00      	cmp	r5, #0
 8008500:	4607      	mov	r7, r0
 8008502:	db01      	blt.n	8008508 <_malloc_r+0x1c>
 8008504:	42a9      	cmp	r1, r5
 8008506:	d905      	bls.n	8008514 <_malloc_r+0x28>
 8008508:	230c      	movs	r3, #12
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	2600      	movs	r6, #0
 800850e:	4630      	mov	r0, r6
 8008510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008514:	4e2e      	ldr	r6, [pc, #184]	; (80085d0 <_malloc_r+0xe4>)
 8008516:	f000 fbc3 	bl	8008ca0 <__malloc_lock>
 800851a:	6833      	ldr	r3, [r6, #0]
 800851c:	461c      	mov	r4, r3
 800851e:	bb34      	cbnz	r4, 800856e <_malloc_r+0x82>
 8008520:	4629      	mov	r1, r5
 8008522:	4638      	mov	r0, r7
 8008524:	f7ff ffc2 	bl	80084ac <sbrk_aligned>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	4604      	mov	r4, r0
 800852c:	d14d      	bne.n	80085ca <_malloc_r+0xde>
 800852e:	6834      	ldr	r4, [r6, #0]
 8008530:	4626      	mov	r6, r4
 8008532:	2e00      	cmp	r6, #0
 8008534:	d140      	bne.n	80085b8 <_malloc_r+0xcc>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	4631      	mov	r1, r6
 800853a:	4638      	mov	r0, r7
 800853c:	eb04 0803 	add.w	r8, r4, r3
 8008540:	f000 f8be 	bl	80086c0 <_sbrk_r>
 8008544:	4580      	cmp	r8, r0
 8008546:	d13a      	bne.n	80085be <_malloc_r+0xd2>
 8008548:	6821      	ldr	r1, [r4, #0]
 800854a:	3503      	adds	r5, #3
 800854c:	1a6d      	subs	r5, r5, r1
 800854e:	f025 0503 	bic.w	r5, r5, #3
 8008552:	3508      	adds	r5, #8
 8008554:	2d0c      	cmp	r5, #12
 8008556:	bf38      	it	cc
 8008558:	250c      	movcc	r5, #12
 800855a:	4629      	mov	r1, r5
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff ffa5 	bl	80084ac <sbrk_aligned>
 8008562:	3001      	adds	r0, #1
 8008564:	d02b      	beq.n	80085be <_malloc_r+0xd2>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	442b      	add	r3, r5
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	e00e      	b.n	800858c <_malloc_r+0xa0>
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	1b52      	subs	r2, r2, r5
 8008572:	d41e      	bmi.n	80085b2 <_malloc_r+0xc6>
 8008574:	2a0b      	cmp	r2, #11
 8008576:	d916      	bls.n	80085a6 <_malloc_r+0xba>
 8008578:	1961      	adds	r1, r4, r5
 800857a:	42a3      	cmp	r3, r4
 800857c:	6025      	str	r5, [r4, #0]
 800857e:	bf18      	it	ne
 8008580:	6059      	strne	r1, [r3, #4]
 8008582:	6863      	ldr	r3, [r4, #4]
 8008584:	bf08      	it	eq
 8008586:	6031      	streq	r1, [r6, #0]
 8008588:	5162      	str	r2, [r4, r5]
 800858a:	604b      	str	r3, [r1, #4]
 800858c:	4638      	mov	r0, r7
 800858e:	f104 060b 	add.w	r6, r4, #11
 8008592:	f000 fb8b 	bl	8008cac <__malloc_unlock>
 8008596:	f026 0607 	bic.w	r6, r6, #7
 800859a:	1d23      	adds	r3, r4, #4
 800859c:	1af2      	subs	r2, r6, r3
 800859e:	d0b6      	beq.n	800850e <_malloc_r+0x22>
 80085a0:	1b9b      	subs	r3, r3, r6
 80085a2:	50a3      	str	r3, [r4, r2]
 80085a4:	e7b3      	b.n	800850e <_malloc_r+0x22>
 80085a6:	6862      	ldr	r2, [r4, #4]
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	bf0c      	ite	eq
 80085ac:	6032      	streq	r2, [r6, #0]
 80085ae:	605a      	strne	r2, [r3, #4]
 80085b0:	e7ec      	b.n	800858c <_malloc_r+0xa0>
 80085b2:	4623      	mov	r3, r4
 80085b4:	6864      	ldr	r4, [r4, #4]
 80085b6:	e7b2      	b.n	800851e <_malloc_r+0x32>
 80085b8:	4634      	mov	r4, r6
 80085ba:	6876      	ldr	r6, [r6, #4]
 80085bc:	e7b9      	b.n	8008532 <_malloc_r+0x46>
 80085be:	230c      	movs	r3, #12
 80085c0:	603b      	str	r3, [r7, #0]
 80085c2:	4638      	mov	r0, r7
 80085c4:	f000 fb72 	bl	8008cac <__malloc_unlock>
 80085c8:	e7a1      	b.n	800850e <_malloc_r+0x22>
 80085ca:	6025      	str	r5, [r4, #0]
 80085cc:	e7de      	b.n	800858c <_malloc_r+0xa0>
 80085ce:	bf00      	nop
 80085d0:	200008cc 	.word	0x200008cc

080085d4 <_puts_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	460e      	mov	r6, r1
 80085d8:	4605      	mov	r5, r0
 80085da:	b118      	cbz	r0, 80085e4 <_puts_r+0x10>
 80085dc:	6983      	ldr	r3, [r0, #24]
 80085de:	b90b      	cbnz	r3, 80085e4 <_puts_r+0x10>
 80085e0:	f000 fa58 	bl	8008a94 <__sinit>
 80085e4:	69ab      	ldr	r3, [r5, #24]
 80085e6:	68ac      	ldr	r4, [r5, #8]
 80085e8:	b913      	cbnz	r3, 80085f0 <_puts_r+0x1c>
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 fa52 	bl	8008a94 <__sinit>
 80085f0:	4b2c      	ldr	r3, [pc, #176]	; (80086a4 <_puts_r+0xd0>)
 80085f2:	429c      	cmp	r4, r3
 80085f4:	d120      	bne.n	8008638 <_puts_r+0x64>
 80085f6:	686c      	ldr	r4, [r5, #4]
 80085f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085fa:	07db      	lsls	r3, r3, #31
 80085fc:	d405      	bmi.n	800860a <_puts_r+0x36>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	0598      	lsls	r0, r3, #22
 8008602:	d402      	bmi.n	800860a <_puts_r+0x36>
 8008604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008606:	f000 fae3 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	d51d      	bpl.n	800864c <_puts_r+0x78>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	b1db      	cbz	r3, 800864c <_puts_r+0x78>
 8008614:	3e01      	subs	r6, #1
 8008616:	68a3      	ldr	r3, [r4, #8]
 8008618:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800861c:	3b01      	subs	r3, #1
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	bb39      	cbnz	r1, 8008672 <_puts_r+0x9e>
 8008622:	2b00      	cmp	r3, #0
 8008624:	da38      	bge.n	8008698 <_puts_r+0xc4>
 8008626:	4622      	mov	r2, r4
 8008628:	210a      	movs	r1, #10
 800862a:	4628      	mov	r0, r5
 800862c:	f000 f858 	bl	80086e0 <__swbuf_r>
 8008630:	3001      	adds	r0, #1
 8008632:	d011      	beq.n	8008658 <_puts_r+0x84>
 8008634:	250a      	movs	r5, #10
 8008636:	e011      	b.n	800865c <_puts_r+0x88>
 8008638:	4b1b      	ldr	r3, [pc, #108]	; (80086a8 <_puts_r+0xd4>)
 800863a:	429c      	cmp	r4, r3
 800863c:	d101      	bne.n	8008642 <_puts_r+0x6e>
 800863e:	68ac      	ldr	r4, [r5, #8]
 8008640:	e7da      	b.n	80085f8 <_puts_r+0x24>
 8008642:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <_puts_r+0xd8>)
 8008644:	429c      	cmp	r4, r3
 8008646:	bf08      	it	eq
 8008648:	68ec      	ldreq	r4, [r5, #12]
 800864a:	e7d5      	b.n	80085f8 <_puts_r+0x24>
 800864c:	4621      	mov	r1, r4
 800864e:	4628      	mov	r0, r5
 8008650:	f000 f898 	bl	8008784 <__swsetup_r>
 8008654:	2800      	cmp	r0, #0
 8008656:	d0dd      	beq.n	8008614 <_puts_r+0x40>
 8008658:	f04f 35ff 	mov.w	r5, #4294967295
 800865c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800865e:	07da      	lsls	r2, r3, #31
 8008660:	d405      	bmi.n	800866e <_puts_r+0x9a>
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	059b      	lsls	r3, r3, #22
 8008666:	d402      	bmi.n	800866e <_puts_r+0x9a>
 8008668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800866a:	f000 fab2 	bl	8008bd2 <__retarget_lock_release_recursive>
 800866e:	4628      	mov	r0, r5
 8008670:	bd70      	pop	{r4, r5, r6, pc}
 8008672:	2b00      	cmp	r3, #0
 8008674:	da04      	bge.n	8008680 <_puts_r+0xac>
 8008676:	69a2      	ldr	r2, [r4, #24]
 8008678:	429a      	cmp	r2, r3
 800867a:	dc06      	bgt.n	800868a <_puts_r+0xb6>
 800867c:	290a      	cmp	r1, #10
 800867e:	d004      	beq.n	800868a <_puts_r+0xb6>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	6022      	str	r2, [r4, #0]
 8008686:	7019      	strb	r1, [r3, #0]
 8008688:	e7c5      	b.n	8008616 <_puts_r+0x42>
 800868a:	4622      	mov	r2, r4
 800868c:	4628      	mov	r0, r5
 800868e:	f000 f827 	bl	80086e0 <__swbuf_r>
 8008692:	3001      	adds	r0, #1
 8008694:	d1bf      	bne.n	8008616 <_puts_r+0x42>
 8008696:	e7df      	b.n	8008658 <_puts_r+0x84>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	250a      	movs	r5, #10
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	701d      	strb	r5, [r3, #0]
 80086a2:	e7db      	b.n	800865c <_puts_r+0x88>
 80086a4:	08008e78 	.word	0x08008e78
 80086a8:	08008e98 	.word	0x08008e98
 80086ac:	08008e58 	.word	0x08008e58

080086b0 <puts>:
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <puts+0xc>)
 80086b2:	4601      	mov	r1, r0
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	f7ff bf8d 	b.w	80085d4 <_puts_r>
 80086ba:	bf00      	nop
 80086bc:	2000002c 	.word	0x2000002c

080086c0 <_sbrk_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	; (80086dc <_sbrk_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f8 fba4 	bl	8000e18 <_sbrk>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_sbrk_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_sbrk_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	200008d8 	.word	0x200008d8

080086e0 <__swbuf_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	460e      	mov	r6, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	4605      	mov	r5, r0
 80086e8:	b118      	cbz	r0, 80086f2 <__swbuf_r+0x12>
 80086ea:	6983      	ldr	r3, [r0, #24]
 80086ec:	b90b      	cbnz	r3, 80086f2 <__swbuf_r+0x12>
 80086ee:	f000 f9d1 	bl	8008a94 <__sinit>
 80086f2:	4b21      	ldr	r3, [pc, #132]	; (8008778 <__swbuf_r+0x98>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d12b      	bne.n	8008750 <__swbuf_r+0x70>
 80086f8:	686c      	ldr	r4, [r5, #4]
 80086fa:	69a3      	ldr	r3, [r4, #24]
 80086fc:	60a3      	str	r3, [r4, #8]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	071a      	lsls	r2, r3, #28
 8008702:	d52f      	bpl.n	8008764 <__swbuf_r+0x84>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	b36b      	cbz	r3, 8008764 <__swbuf_r+0x84>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	6820      	ldr	r0, [r4, #0]
 800870c:	1ac0      	subs	r0, r0, r3
 800870e:	6963      	ldr	r3, [r4, #20]
 8008710:	b2f6      	uxtb	r6, r6
 8008712:	4283      	cmp	r3, r0
 8008714:	4637      	mov	r7, r6
 8008716:	dc04      	bgt.n	8008722 <__swbuf_r+0x42>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f926 	bl	800896c <_fflush_r>
 8008720:	bb30      	cbnz	r0, 8008770 <__swbuf_r+0x90>
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	3b01      	subs	r3, #1
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	701e      	strb	r6, [r3, #0]
 8008730:	6963      	ldr	r3, [r4, #20]
 8008732:	3001      	adds	r0, #1
 8008734:	4283      	cmp	r3, r0
 8008736:	d004      	beq.n	8008742 <__swbuf_r+0x62>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	07db      	lsls	r3, r3, #31
 800873c:	d506      	bpl.n	800874c <__swbuf_r+0x6c>
 800873e:	2e0a      	cmp	r6, #10
 8008740:	d104      	bne.n	800874c <__swbuf_r+0x6c>
 8008742:	4621      	mov	r1, r4
 8008744:	4628      	mov	r0, r5
 8008746:	f000 f911 	bl	800896c <_fflush_r>
 800874a:	b988      	cbnz	r0, 8008770 <__swbuf_r+0x90>
 800874c:	4638      	mov	r0, r7
 800874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <__swbuf_r+0x9c>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d101      	bne.n	800875a <__swbuf_r+0x7a>
 8008756:	68ac      	ldr	r4, [r5, #8]
 8008758:	e7cf      	b.n	80086fa <__swbuf_r+0x1a>
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <__swbuf_r+0xa0>)
 800875c:	429c      	cmp	r4, r3
 800875e:	bf08      	it	eq
 8008760:	68ec      	ldreq	r4, [r5, #12]
 8008762:	e7ca      	b.n	80086fa <__swbuf_r+0x1a>
 8008764:	4621      	mov	r1, r4
 8008766:	4628      	mov	r0, r5
 8008768:	f000 f80c 	bl	8008784 <__swsetup_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	d0cb      	beq.n	8008708 <__swbuf_r+0x28>
 8008770:	f04f 37ff 	mov.w	r7, #4294967295
 8008774:	e7ea      	b.n	800874c <__swbuf_r+0x6c>
 8008776:	bf00      	nop
 8008778:	08008e78 	.word	0x08008e78
 800877c:	08008e98 	.word	0x08008e98
 8008780:	08008e58 	.word	0x08008e58

08008784 <__swsetup_r>:
 8008784:	4b32      	ldr	r3, [pc, #200]	; (8008850 <__swsetup_r+0xcc>)
 8008786:	b570      	push	{r4, r5, r6, lr}
 8008788:	681d      	ldr	r5, [r3, #0]
 800878a:	4606      	mov	r6, r0
 800878c:	460c      	mov	r4, r1
 800878e:	b125      	cbz	r5, 800879a <__swsetup_r+0x16>
 8008790:	69ab      	ldr	r3, [r5, #24]
 8008792:	b913      	cbnz	r3, 800879a <__swsetup_r+0x16>
 8008794:	4628      	mov	r0, r5
 8008796:	f000 f97d 	bl	8008a94 <__sinit>
 800879a:	4b2e      	ldr	r3, [pc, #184]	; (8008854 <__swsetup_r+0xd0>)
 800879c:	429c      	cmp	r4, r3
 800879e:	d10f      	bne.n	80087c0 <__swsetup_r+0x3c>
 80087a0:	686c      	ldr	r4, [r5, #4]
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a8:	0719      	lsls	r1, r3, #28
 80087aa:	d42c      	bmi.n	8008806 <__swsetup_r+0x82>
 80087ac:	06dd      	lsls	r5, r3, #27
 80087ae:	d411      	bmi.n	80087d4 <__swsetup_r+0x50>
 80087b0:	2309      	movs	r3, #9
 80087b2:	6033      	str	r3, [r6, #0]
 80087b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295
 80087be:	e03e      	b.n	800883e <__swsetup_r+0xba>
 80087c0:	4b25      	ldr	r3, [pc, #148]	; (8008858 <__swsetup_r+0xd4>)
 80087c2:	429c      	cmp	r4, r3
 80087c4:	d101      	bne.n	80087ca <__swsetup_r+0x46>
 80087c6:	68ac      	ldr	r4, [r5, #8]
 80087c8:	e7eb      	b.n	80087a2 <__swsetup_r+0x1e>
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <__swsetup_r+0xd8>)
 80087cc:	429c      	cmp	r4, r3
 80087ce:	bf08      	it	eq
 80087d0:	68ec      	ldreq	r4, [r5, #12]
 80087d2:	e7e6      	b.n	80087a2 <__swsetup_r+0x1e>
 80087d4:	0758      	lsls	r0, r3, #29
 80087d6:	d512      	bpl.n	80087fe <__swsetup_r+0x7a>
 80087d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087da:	b141      	cbz	r1, 80087ee <__swsetup_r+0x6a>
 80087dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087e0:	4299      	cmp	r1, r3
 80087e2:	d002      	beq.n	80087ea <__swsetup_r+0x66>
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7ff fe15 	bl	8008414 <_free_r>
 80087ea:	2300      	movs	r3, #0
 80087ec:	6363      	str	r3, [r4, #52]	; 0x34
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	2300      	movs	r3, #0
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f043 0308 	orr.w	r3, r3, #8
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	b94b      	cbnz	r3, 800881e <__swsetup_r+0x9a>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008814:	d003      	beq.n	800881e <__swsetup_r+0x9a>
 8008816:	4621      	mov	r1, r4
 8008818:	4630      	mov	r0, r6
 800881a:	f000 fa01 	bl	8008c20 <__smakebuf_r>
 800881e:	89a0      	ldrh	r0, [r4, #12]
 8008820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008824:	f010 0301 	ands.w	r3, r0, #1
 8008828:	d00a      	beq.n	8008840 <__swsetup_r+0xbc>
 800882a:	2300      	movs	r3, #0
 800882c:	60a3      	str	r3, [r4, #8]
 800882e:	6963      	ldr	r3, [r4, #20]
 8008830:	425b      	negs	r3, r3
 8008832:	61a3      	str	r3, [r4, #24]
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	b943      	cbnz	r3, 800884a <__swsetup_r+0xc6>
 8008838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800883c:	d1ba      	bne.n	80087b4 <__swsetup_r+0x30>
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	0781      	lsls	r1, r0, #30
 8008842:	bf58      	it	pl
 8008844:	6963      	ldrpl	r3, [r4, #20]
 8008846:	60a3      	str	r3, [r4, #8]
 8008848:	e7f4      	b.n	8008834 <__swsetup_r+0xb0>
 800884a:	2000      	movs	r0, #0
 800884c:	e7f7      	b.n	800883e <__swsetup_r+0xba>
 800884e:	bf00      	nop
 8008850:	2000002c 	.word	0x2000002c
 8008854:	08008e78 	.word	0x08008e78
 8008858:	08008e98 	.word	0x08008e98
 800885c:	08008e58 	.word	0x08008e58

08008860 <__sflush_r>:
 8008860:	898a      	ldrh	r2, [r1, #12]
 8008862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008866:	4605      	mov	r5, r0
 8008868:	0710      	lsls	r0, r2, #28
 800886a:	460c      	mov	r4, r1
 800886c:	d458      	bmi.n	8008920 <__sflush_r+0xc0>
 800886e:	684b      	ldr	r3, [r1, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	dc05      	bgt.n	8008880 <__sflush_r+0x20>
 8008874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	dc02      	bgt.n	8008880 <__sflush_r+0x20>
 800887a:	2000      	movs	r0, #0
 800887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008882:	2e00      	cmp	r6, #0
 8008884:	d0f9      	beq.n	800887a <__sflush_r+0x1a>
 8008886:	2300      	movs	r3, #0
 8008888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800888c:	682f      	ldr	r7, [r5, #0]
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	d032      	beq.n	80088f8 <__sflush_r+0x98>
 8008892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	075a      	lsls	r2, r3, #29
 8008898:	d505      	bpl.n	80088a6 <__sflush_r+0x46>
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	1ac0      	subs	r0, r0, r3
 800889e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088a0:	b10b      	cbz	r3, 80088a6 <__sflush_r+0x46>
 80088a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088a4:	1ac0      	subs	r0, r0, r3
 80088a6:	2300      	movs	r3, #0
 80088a8:	4602      	mov	r2, r0
 80088aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ac:	6a21      	ldr	r1, [r4, #32]
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b0      	blx	r6
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	d106      	bne.n	80088c6 <__sflush_r+0x66>
 80088b8:	6829      	ldr	r1, [r5, #0]
 80088ba:	291d      	cmp	r1, #29
 80088bc:	d82c      	bhi.n	8008918 <__sflush_r+0xb8>
 80088be:	4a2a      	ldr	r2, [pc, #168]	; (8008968 <__sflush_r+0x108>)
 80088c0:	40ca      	lsrs	r2, r1
 80088c2:	07d6      	lsls	r6, r2, #31
 80088c4:	d528      	bpl.n	8008918 <__sflush_r+0xb8>
 80088c6:	2200      	movs	r2, #0
 80088c8:	6062      	str	r2, [r4, #4]
 80088ca:	04d9      	lsls	r1, r3, #19
 80088cc:	6922      	ldr	r2, [r4, #16]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	d504      	bpl.n	80088dc <__sflush_r+0x7c>
 80088d2:	1c42      	adds	r2, r0, #1
 80088d4:	d101      	bne.n	80088da <__sflush_r+0x7a>
 80088d6:	682b      	ldr	r3, [r5, #0]
 80088d8:	b903      	cbnz	r3, 80088dc <__sflush_r+0x7c>
 80088da:	6560      	str	r0, [r4, #84]	; 0x54
 80088dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088de:	602f      	str	r7, [r5, #0]
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d0ca      	beq.n	800887a <__sflush_r+0x1a>
 80088e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e8:	4299      	cmp	r1, r3
 80088ea:	d002      	beq.n	80088f2 <__sflush_r+0x92>
 80088ec:	4628      	mov	r0, r5
 80088ee:	f7ff fd91 	bl	8008414 <_free_r>
 80088f2:	2000      	movs	r0, #0
 80088f4:	6360      	str	r0, [r4, #52]	; 0x34
 80088f6:	e7c1      	b.n	800887c <__sflush_r+0x1c>
 80088f8:	6a21      	ldr	r1, [r4, #32]
 80088fa:	2301      	movs	r3, #1
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b0      	blx	r6
 8008900:	1c41      	adds	r1, r0, #1
 8008902:	d1c7      	bne.n	8008894 <__sflush_r+0x34>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0c4      	beq.n	8008894 <__sflush_r+0x34>
 800890a:	2b1d      	cmp	r3, #29
 800890c:	d001      	beq.n	8008912 <__sflush_r+0xb2>
 800890e:	2b16      	cmp	r3, #22
 8008910:	d101      	bne.n	8008916 <__sflush_r+0xb6>
 8008912:	602f      	str	r7, [r5, #0]
 8008914:	e7b1      	b.n	800887a <__sflush_r+0x1a>
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	e7ad      	b.n	800887c <__sflush_r+0x1c>
 8008920:	690f      	ldr	r7, [r1, #16]
 8008922:	2f00      	cmp	r7, #0
 8008924:	d0a9      	beq.n	800887a <__sflush_r+0x1a>
 8008926:	0793      	lsls	r3, r2, #30
 8008928:	680e      	ldr	r6, [r1, #0]
 800892a:	bf08      	it	eq
 800892c:	694b      	ldreq	r3, [r1, #20]
 800892e:	600f      	str	r7, [r1, #0]
 8008930:	bf18      	it	ne
 8008932:	2300      	movne	r3, #0
 8008934:	eba6 0807 	sub.w	r8, r6, r7
 8008938:	608b      	str	r3, [r1, #8]
 800893a:	f1b8 0f00 	cmp.w	r8, #0
 800893e:	dd9c      	ble.n	800887a <__sflush_r+0x1a>
 8008940:	6a21      	ldr	r1, [r4, #32]
 8008942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008944:	4643      	mov	r3, r8
 8008946:	463a      	mov	r2, r7
 8008948:	4628      	mov	r0, r5
 800894a:	47b0      	blx	r6
 800894c:	2800      	cmp	r0, #0
 800894e:	dc06      	bgt.n	800895e <__sflush_r+0xfe>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	e78e      	b.n	800887c <__sflush_r+0x1c>
 800895e:	4407      	add	r7, r0
 8008960:	eba8 0800 	sub.w	r8, r8, r0
 8008964:	e7e9      	b.n	800893a <__sflush_r+0xda>
 8008966:	bf00      	nop
 8008968:	20400001 	.word	0x20400001

0800896c <_fflush_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	690b      	ldr	r3, [r1, #16]
 8008970:	4605      	mov	r5, r0
 8008972:	460c      	mov	r4, r1
 8008974:	b913      	cbnz	r3, 800897c <_fflush_r+0x10>
 8008976:	2500      	movs	r5, #0
 8008978:	4628      	mov	r0, r5
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	b118      	cbz	r0, 8008986 <_fflush_r+0x1a>
 800897e:	6983      	ldr	r3, [r0, #24]
 8008980:	b90b      	cbnz	r3, 8008986 <_fflush_r+0x1a>
 8008982:	f000 f887 	bl	8008a94 <__sinit>
 8008986:	4b14      	ldr	r3, [pc, #80]	; (80089d8 <_fflush_r+0x6c>)
 8008988:	429c      	cmp	r4, r3
 800898a:	d11b      	bne.n	80089c4 <_fflush_r+0x58>
 800898c:	686c      	ldr	r4, [r5, #4]
 800898e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0ef      	beq.n	8008976 <_fflush_r+0xa>
 8008996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008998:	07d0      	lsls	r0, r2, #31
 800899a:	d404      	bmi.n	80089a6 <_fflush_r+0x3a>
 800899c:	0599      	lsls	r1, r3, #22
 800899e:	d402      	bmi.n	80089a6 <_fflush_r+0x3a>
 80089a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a2:	f000 f915 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 80089a6:	4628      	mov	r0, r5
 80089a8:	4621      	mov	r1, r4
 80089aa:	f7ff ff59 	bl	8008860 <__sflush_r>
 80089ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b0:	07da      	lsls	r2, r3, #31
 80089b2:	4605      	mov	r5, r0
 80089b4:	d4e0      	bmi.n	8008978 <_fflush_r+0xc>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	059b      	lsls	r3, r3, #22
 80089ba:	d4dd      	bmi.n	8008978 <_fflush_r+0xc>
 80089bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089be:	f000 f908 	bl	8008bd2 <__retarget_lock_release_recursive>
 80089c2:	e7d9      	b.n	8008978 <_fflush_r+0xc>
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <_fflush_r+0x70>)
 80089c6:	429c      	cmp	r4, r3
 80089c8:	d101      	bne.n	80089ce <_fflush_r+0x62>
 80089ca:	68ac      	ldr	r4, [r5, #8]
 80089cc:	e7df      	b.n	800898e <_fflush_r+0x22>
 80089ce:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <_fflush_r+0x74>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	bf08      	it	eq
 80089d4:	68ec      	ldreq	r4, [r5, #12]
 80089d6:	e7da      	b.n	800898e <_fflush_r+0x22>
 80089d8:	08008e78 	.word	0x08008e78
 80089dc:	08008e98 	.word	0x08008e98
 80089e0:	08008e58 	.word	0x08008e58

080089e4 <std>:
 80089e4:	2300      	movs	r3, #0
 80089e6:	b510      	push	{r4, lr}
 80089e8:	4604      	mov	r4, r0
 80089ea:	e9c0 3300 	strd	r3, r3, [r0]
 80089ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089f2:	6083      	str	r3, [r0, #8]
 80089f4:	8181      	strh	r1, [r0, #12]
 80089f6:	6643      	str	r3, [r0, #100]	; 0x64
 80089f8:	81c2      	strh	r2, [r0, #14]
 80089fa:	6183      	str	r3, [r0, #24]
 80089fc:	4619      	mov	r1, r3
 80089fe:	2208      	movs	r2, #8
 8008a00:	305c      	adds	r0, #92	; 0x5c
 8008a02:	f7ff fcff 	bl	8008404 <memset>
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <std+0x38>)
 8008a08:	6263      	str	r3, [r4, #36]	; 0x24
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <std+0x3c>)
 8008a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a0e:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <std+0x40>)
 8008a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <std+0x44>)
 8008a14:	6224      	str	r4, [r4, #32]
 8008a16:	6323      	str	r3, [r4, #48]	; 0x30
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08008cb9 	.word	0x08008cb9
 8008a20:	08008cdb 	.word	0x08008cdb
 8008a24:	08008d13 	.word	0x08008d13
 8008a28:	08008d37 	.word	0x08008d37

08008a2c <_cleanup_r>:
 8008a2c:	4901      	ldr	r1, [pc, #4]	; (8008a34 <_cleanup_r+0x8>)
 8008a2e:	f000 b8af 	b.w	8008b90 <_fwalk_reent>
 8008a32:	bf00      	nop
 8008a34:	0800896d 	.word	0x0800896d

08008a38 <__sfmoreglue>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	2268      	movs	r2, #104	; 0x68
 8008a3c:	1e4d      	subs	r5, r1, #1
 8008a3e:	4355      	muls	r5, r2
 8008a40:	460e      	mov	r6, r1
 8008a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a46:	f7ff fd51 	bl	80084ec <_malloc_r>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	b140      	cbz	r0, 8008a60 <__sfmoreglue+0x28>
 8008a4e:	2100      	movs	r1, #0
 8008a50:	e9c0 1600 	strd	r1, r6, [r0]
 8008a54:	300c      	adds	r0, #12
 8008a56:	60a0      	str	r0, [r4, #8]
 8008a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a5c:	f7ff fcd2 	bl	8008404 <memset>
 8008a60:	4620      	mov	r0, r4
 8008a62:	bd70      	pop	{r4, r5, r6, pc}

08008a64 <__sfp_lock_acquire>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__sfp_lock_acquire+0x8>)
 8008a66:	f000 b8b3 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	200008d5 	.word	0x200008d5

08008a70 <__sfp_lock_release>:
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <__sfp_lock_release+0x8>)
 8008a72:	f000 b8ae 	b.w	8008bd2 <__retarget_lock_release_recursive>
 8008a76:	bf00      	nop
 8008a78:	200008d5 	.word	0x200008d5

08008a7c <__sinit_lock_acquire>:
 8008a7c:	4801      	ldr	r0, [pc, #4]	; (8008a84 <__sinit_lock_acquire+0x8>)
 8008a7e:	f000 b8a7 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 8008a82:	bf00      	nop
 8008a84:	200008d6 	.word	0x200008d6

08008a88 <__sinit_lock_release>:
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <__sinit_lock_release+0x8>)
 8008a8a:	f000 b8a2 	b.w	8008bd2 <__retarget_lock_release_recursive>
 8008a8e:	bf00      	nop
 8008a90:	200008d6 	.word	0x200008d6

08008a94 <__sinit>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	4604      	mov	r4, r0
 8008a98:	f7ff fff0 	bl	8008a7c <__sinit_lock_acquire>
 8008a9c:	69a3      	ldr	r3, [r4, #24]
 8008a9e:	b11b      	cbz	r3, 8008aa8 <__sinit+0x14>
 8008aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa4:	f7ff bff0 	b.w	8008a88 <__sinit_lock_release>
 8008aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008aac:	6523      	str	r3, [r4, #80]	; 0x50
 8008aae:	4b13      	ldr	r3, [pc, #76]	; (8008afc <__sinit+0x68>)
 8008ab0:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <__sinit+0x6c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ab6:	42a3      	cmp	r3, r4
 8008ab8:	bf04      	itt	eq
 8008aba:	2301      	moveq	r3, #1
 8008abc:	61a3      	streq	r3, [r4, #24]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f820 	bl	8008b04 <__sfp>
 8008ac4:	6060      	str	r0, [r4, #4]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f81c 	bl	8008b04 <__sfp>
 8008acc:	60a0      	str	r0, [r4, #8]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 f818 	bl	8008b04 <__sfp>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	60e0      	str	r0, [r4, #12]
 8008ad8:	2104      	movs	r1, #4
 8008ada:	6860      	ldr	r0, [r4, #4]
 8008adc:	f7ff ff82 	bl	80089e4 <std>
 8008ae0:	68a0      	ldr	r0, [r4, #8]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	2109      	movs	r1, #9
 8008ae6:	f7ff ff7d 	bl	80089e4 <std>
 8008aea:	68e0      	ldr	r0, [r4, #12]
 8008aec:	2202      	movs	r2, #2
 8008aee:	2112      	movs	r1, #18
 8008af0:	f7ff ff78 	bl	80089e4 <std>
 8008af4:	2301      	movs	r3, #1
 8008af6:	61a3      	str	r3, [r4, #24]
 8008af8:	e7d2      	b.n	8008aa0 <__sinit+0xc>
 8008afa:	bf00      	nop
 8008afc:	08008e54 	.word	0x08008e54
 8008b00:	08008a2d 	.word	0x08008a2d

08008b04 <__sfp>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	4607      	mov	r7, r0
 8008b08:	f7ff ffac 	bl	8008a64 <__sfp_lock_acquire>
 8008b0c:	4b1e      	ldr	r3, [pc, #120]	; (8008b88 <__sfp+0x84>)
 8008b0e:	681e      	ldr	r6, [r3, #0]
 8008b10:	69b3      	ldr	r3, [r6, #24]
 8008b12:	b913      	cbnz	r3, 8008b1a <__sfp+0x16>
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff ffbd 	bl	8008a94 <__sinit>
 8008b1a:	3648      	adds	r6, #72	; 0x48
 8008b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	d503      	bpl.n	8008b2c <__sfp+0x28>
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	b30b      	cbz	r3, 8008b6c <__sfp+0x68>
 8008b28:	6836      	ldr	r6, [r6, #0]
 8008b2a:	e7f7      	b.n	8008b1c <__sfp+0x18>
 8008b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b30:	b9d5      	cbnz	r5, 8008b68 <__sfp+0x64>
 8008b32:	4b16      	ldr	r3, [pc, #88]	; (8008b8c <__sfp+0x88>)
 8008b34:	60e3      	str	r3, [r4, #12]
 8008b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b3c:	f000 f847 	bl	8008bce <__retarget_lock_init_recursive>
 8008b40:	f7ff ff96 	bl	8008a70 <__sfp_lock_release>
 8008b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b4c:	6025      	str	r5, [r4, #0]
 8008b4e:	61a5      	str	r5, [r4, #24]
 8008b50:	2208      	movs	r2, #8
 8008b52:	4629      	mov	r1, r5
 8008b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b58:	f7ff fc54 	bl	8008404 <memset>
 8008b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b64:	4620      	mov	r0, r4
 8008b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b68:	3468      	adds	r4, #104	; 0x68
 8008b6a:	e7d9      	b.n	8008b20 <__sfp+0x1c>
 8008b6c:	2104      	movs	r1, #4
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f7ff ff62 	bl	8008a38 <__sfmoreglue>
 8008b74:	4604      	mov	r4, r0
 8008b76:	6030      	str	r0, [r6, #0]
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d1d5      	bne.n	8008b28 <__sfp+0x24>
 8008b7c:	f7ff ff78 	bl	8008a70 <__sfp_lock_release>
 8008b80:	230c      	movs	r3, #12
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	e7ee      	b.n	8008b64 <__sfp+0x60>
 8008b86:	bf00      	nop
 8008b88:	08008e54 	.word	0x08008e54
 8008b8c:	ffff0001 	.word	0xffff0001

08008b90 <_fwalk_reent>:
 8008b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	4606      	mov	r6, r0
 8008b96:	4688      	mov	r8, r1
 8008b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b9c:	2700      	movs	r7, #0
 8008b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ba6:	d505      	bpl.n	8008bb4 <_fwalk_reent+0x24>
 8008ba8:	6824      	ldr	r4, [r4, #0]
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	d1f7      	bne.n	8008b9e <_fwalk_reent+0xe>
 8008bae:	4638      	mov	r0, r7
 8008bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb4:	89ab      	ldrh	r3, [r5, #12]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d907      	bls.n	8008bca <_fwalk_reent+0x3a>
 8008bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	d003      	beq.n	8008bca <_fwalk_reent+0x3a>
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	47c0      	blx	r8
 8008bc8:	4307      	orrs	r7, r0
 8008bca:	3568      	adds	r5, #104	; 0x68
 8008bcc:	e7e9      	b.n	8008ba2 <_fwalk_reent+0x12>

08008bce <__retarget_lock_init_recursive>:
 8008bce:	4770      	bx	lr

08008bd0 <__retarget_lock_acquire_recursive>:
 8008bd0:	4770      	bx	lr

08008bd2 <__retarget_lock_release_recursive>:
 8008bd2:	4770      	bx	lr

08008bd4 <__swhatbuf_r>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	460e      	mov	r6, r1
 8008bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	b096      	sub	sp, #88	; 0x58
 8008be0:	4614      	mov	r4, r2
 8008be2:	461d      	mov	r5, r3
 8008be4:	da08      	bge.n	8008bf8 <__swhatbuf_r+0x24>
 8008be6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	061a      	lsls	r2, r3, #24
 8008bf0:	d410      	bmi.n	8008c14 <__swhatbuf_r+0x40>
 8008bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf6:	e00e      	b.n	8008c16 <__swhatbuf_r+0x42>
 8008bf8:	466a      	mov	r2, sp
 8008bfa:	f000 f8c3 	bl	8008d84 <_fstat_r>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	dbf1      	blt.n	8008be6 <__swhatbuf_r+0x12>
 8008c02:	9a01      	ldr	r2, [sp, #4]
 8008c04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c0c:	425a      	negs	r2, r3
 8008c0e:	415a      	adcs	r2, r3
 8008c10:	602a      	str	r2, [r5, #0]
 8008c12:	e7ee      	b.n	8008bf2 <__swhatbuf_r+0x1e>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	2000      	movs	r0, #0
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	b016      	add	sp, #88	; 0x58
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c20 <__smakebuf_r>:
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c24:	079d      	lsls	r5, r3, #30
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d507      	bpl.n	8008c3c <__smakebuf_r+0x1c>
 8008c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	2301      	movs	r3, #1
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	b002      	add	sp, #8
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	ab01      	add	r3, sp, #4
 8008c3e:	466a      	mov	r2, sp
 8008c40:	f7ff ffc8 	bl	8008bd4 <__swhatbuf_r>
 8008c44:	9900      	ldr	r1, [sp, #0]
 8008c46:	4605      	mov	r5, r0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff fc4f 	bl	80084ec <_malloc_r>
 8008c4e:	b948      	cbnz	r0, 8008c64 <__smakebuf_r+0x44>
 8008c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d4ef      	bmi.n	8008c38 <__smakebuf_r+0x18>
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	f043 0302 	orr.w	r3, r3, #2
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	e7e3      	b.n	8008c2c <__smakebuf_r+0xc>
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <__smakebuf_r+0x7c>)
 8008c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	6020      	str	r0, [r4, #0]
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	81a3      	strh	r3, [r4, #12]
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	6163      	str	r3, [r4, #20]
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	6120      	str	r0, [r4, #16]
 8008c7a:	b15b      	cbz	r3, 8008c94 <__smakebuf_r+0x74>
 8008c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f891 	bl	8008da8 <_isatty_r>
 8008c86:	b128      	cbz	r0, 8008c94 <__smakebuf_r+0x74>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	89a0      	ldrh	r0, [r4, #12]
 8008c96:	4305      	orrs	r5, r0
 8008c98:	81a5      	strh	r5, [r4, #12]
 8008c9a:	e7cd      	b.n	8008c38 <__smakebuf_r+0x18>
 8008c9c:	08008a2d 	.word	0x08008a2d

08008ca0 <__malloc_lock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__malloc_lock+0x8>)
 8008ca2:	f7ff bf95 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	200008d4 	.word	0x200008d4

08008cac <__malloc_unlock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__malloc_unlock+0x8>)
 8008cae:	f7ff bf90 	b.w	8008bd2 <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	200008d4 	.word	0x200008d4

08008cb8 <__sread>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	460c      	mov	r4, r1
 8008cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc0:	f000 f894 	bl	8008dec <_read_r>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	bfab      	itete	ge
 8008cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cca:	89a3      	ldrhlt	r3, [r4, #12]
 8008ccc:	181b      	addge	r3, r3, r0
 8008cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cd2:	bfac      	ite	ge
 8008cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cd6:	81a3      	strhlt	r3, [r4, #12]
 8008cd8:	bd10      	pop	{r4, pc}

08008cda <__swrite>:
 8008cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cde:	461f      	mov	r7, r3
 8008ce0:	898b      	ldrh	r3, [r1, #12]
 8008ce2:	05db      	lsls	r3, r3, #23
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	4616      	mov	r6, r2
 8008cea:	d505      	bpl.n	8008cf8 <__swrite+0x1e>
 8008cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f000 f868 	bl	8008dc8 <_lseek_r>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	4632      	mov	r2, r6
 8008d06:	463b      	mov	r3, r7
 8008d08:	4628      	mov	r0, r5
 8008d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	f000 b817 	b.w	8008d40 <_write_r>

08008d12 <__sseek>:
 8008d12:	b510      	push	{r4, lr}
 8008d14:	460c      	mov	r4, r1
 8008d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1a:	f000 f855 	bl	8008dc8 <_lseek_r>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	bf15      	itete	ne
 8008d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d2e:	81a3      	strheq	r3, [r4, #12]
 8008d30:	bf18      	it	ne
 8008d32:	81a3      	strhne	r3, [r4, #12]
 8008d34:	bd10      	pop	{r4, pc}

08008d36 <__sclose>:
 8008d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3a:	f000 b813 	b.w	8008d64 <_close_r>
	...

08008d40 <_write_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	; (8008d60 <_write_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7f7 fbbc 	bl	80004cc <_write>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_write_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_write_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	200008d8 	.word	0x200008d8

08008d64 <_close_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d06      	ldr	r5, [pc, #24]	; (8008d80 <_close_r+0x1c>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7f8 f81d 	bl	8000dae <_close>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_close_r+0x1a>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_close_r+0x1a>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	200008d8 	.word	0x200008d8

08008d84 <_fstat_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d07      	ldr	r5, [pc, #28]	; (8008da4 <_fstat_r+0x20>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	f7f8 f818 	bl	8000dc6 <_fstat>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d102      	bne.n	8008da0 <_fstat_r+0x1c>
 8008d9a:	682b      	ldr	r3, [r5, #0]
 8008d9c:	b103      	cbz	r3, 8008da0 <_fstat_r+0x1c>
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	bd38      	pop	{r3, r4, r5, pc}
 8008da2:	bf00      	nop
 8008da4:	200008d8 	.word	0x200008d8

08008da8 <_isatty_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d06      	ldr	r5, [pc, #24]	; (8008dc4 <_isatty_r+0x1c>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	f7f8 f817 	bl	8000de6 <_isatty>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_isatty_r+0x1a>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_isatty_r+0x1a>
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	200008d8 	.word	0x200008d8

08008dc8 <_lseek_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4d07      	ldr	r5, [pc, #28]	; (8008de8 <_lseek_r+0x20>)
 8008dcc:	4604      	mov	r4, r0
 8008dce:	4608      	mov	r0, r1
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	602a      	str	r2, [r5, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f7f8 f810 	bl	8000dfc <_lseek>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_lseek_r+0x1e>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_lseek_r+0x1e>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	200008d8 	.word	0x200008d8

08008dec <_read_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d07      	ldr	r5, [pc, #28]	; (8008e0c <_read_r+0x20>)
 8008df0:	4604      	mov	r4, r0
 8008df2:	4608      	mov	r0, r1
 8008df4:	4611      	mov	r1, r2
 8008df6:	2200      	movs	r2, #0
 8008df8:	602a      	str	r2, [r5, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f7f7 ffba 	bl	8000d74 <_read>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_read_r+0x1e>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_read_r+0x1e>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	200008d8 	.word	0x200008d8

08008e10 <_init>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr

08008e1c <_fini>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr
